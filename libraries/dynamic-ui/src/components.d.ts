/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AlertType } from "./components/m-alert/m-alert-interface";
import { ComponentSize, InputState } from "./utils/component-interface";
import { ButtonType, ButtonVariant } from "./components/m-button/m-button-interface";
import { FormCheckType } from "./components/m-input-check/m-input-check-interface";
import { Options } from "currency.js";
import { PinInputMode, PinInputType } from "./components/m-input-pin/m-input-pin-interface";
import { FullScreenFrom, ModalSize } from "./components/m-modal/m-modal-interface";
import { PositionToggleFrom } from "./components/m-offcanvas/m-offcanvas-interface";
export { AlertType } from "./components/m-alert/m-alert-interface";
export { ComponentSize, InputState } from "./utils/component-interface";
export { ButtonType, ButtonVariant } from "./components/m-button/m-button-interface";
export { FormCheckType } from "./components/m-input-check/m-input-check-interface";
export { Options } from "currency.js";
export { PinInputMode, PinInputType } from "./components/m-input-pin/m-input-pin-interface";
export { FullScreenFrom, ModalSize } from "./components/m-modal/m-modal-interface";
export { PositionToggleFrom } from "./components/m-offcanvas/m-offcanvas-interface";
export namespace Components {
    interface MAlert {
        /**
          * Alert icon
         */
        "icon"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Show close button
         */
        "showClose"?: boolean;
        /**
          * Show alert icon
         */
        "showIcon": boolean;
        /**
          * Alert type
         */
        "type": AlertType;
    }
    interface MBadge {
        /**
          * Enable dot mode
         */
        "isDot": boolean;
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme": string;
    }
    interface MButton {
        /**
          * Icon right to display
         */
        "iconEnd"?: string;
        /**
          * Icon right family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Icon right family prefix
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon left to display
         */
        "iconStart"?: string;
        /**
          * Icon left family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Icon left family prefix
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the button, alias to state="disable"
         */
        "isDisabled": boolean;
        /**
          * Flag to loading state and disable button.
         */
        "isLoading": boolean;
        /**
          * Flag to switch to pill button border radius.
         */
        "isPill": boolean;
        /**
          * The size
         */
        "size"?: ComponentSize;
        /**
          * Change the state of the button
         */
        "state"?: InputState;
        /**
          * The text to display.
         */
        "text": string;
        /**
          * Theme to use.
         */
        "theme": string;
        /**
          * The html type of the button.
         */
        "type": ButtonType;
        /**
          * The html value of the button.
         */
        "value"?: string;
        /**
          * The variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface MChip {
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "iconFamilyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "iconFamilyPrefix"?: string;
        /**
          * Show close icon
         */
        "showClose"?: boolean;
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme": string;
    }
    interface MIcon {
        /**
          * Icon background color in css color unit or var
         */
        "backgroundColor"?: string;
        /**
          * Circle size in css length unit
         */
        "circleSize"?: string;
        /**
          * Icon color in css color unit or var
         */
        "color"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "familyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "familyPrefix"?: string;
        /**
          * Add circle around the icon
         */
        "hasCircle": boolean;
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon": string;
        /**
          * Enable loading animation
         */
        "isLoading": boolean;
        /**
          * Loading animation duration, in seconds
         */
        "loadingDuration": number;
        /**
          * Size of the icon in css length unit
         */
        "size"?: string;
        /**
          * Theme of the icon
         */
        "theme"?: string;
    }
    interface MInput {
        /**
          * Set blur to internal input
         */
        "blurInput": () => Promise<void>;
        /**
          * Set focus to internal input
         */
        "focusInput": () => Promise<void>;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon to display on input right
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon to display on input left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * Input mode
         */
        "mInputMode"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Pattern to validate
         */
        "pattern"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The type of the input
         */
        "type": string;
        /**
          * The value of the input
         */
        "value": string | number;
    }
    interface MInputCheck {
        /**
          * Set checkbox or radio button marked as selected or not
         */
        "isChecked": boolean;
        /**
          * Set input as disabled
         */
        "isDisabled": boolean;
        /**
          * Set view of checkbox as indeterminated
         */
        "isIndeterminate"?: boolean;
        /**
          * Text that will be displayed beside Check input or Radio input
         */
        "label"?: string;
        /**
          * Form control identifier
         */
        "mId": string;
        /**
          * HTML Name to use within a form or JS reference
         */
        "name"?: string;
        /**
          * Set whether is a checkbox input or a radio input
         */
        "type": FormCheckType;
        /**
          * A string representing the value of the checkbox or radio
         */
        "value"?: string;
    }
    interface MInputCounter {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd": string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart": string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue": number;
        /**
          * * The min value of the input
         */
        "minValue": number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The value of the input
         */
        "value": number;
    }
    interface MInputCurrencyBase {
        /**
          * Currency code
         */
        "currencyCode"?: string;
        /**
          * Options for the m-input-currency-base
         */
        "currencyOptions": Options;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue"?: number;
        /**
          * * The min value of the input
         */
        "minValue"?: number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Placeholder for the input
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: number;
    }
    interface MInputPassword {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface MInputPin {
        /**
          * Number of characters of the pin
         */
        "characters": number;
        /**
          * Hint for the m-coupon
         */
        "hint"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Hide the characters
         */
        "isSecret": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Id for the input
         */
        "mId": string;
        /**
          * Keyboard style
         */
        "mInputMode": PinInputMode;
        /**
          * Placeholder of the inputs
         */
        "placeholder"?: string;
        /**
          * Type of the inputs
         */
        "type": PinInputType;
    }
    interface MInputSearch {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface MInputSelect {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * The end icon for the select
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * The start icon for the select
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Callback to extract the label from the option
         */
        "labelExtractor": (item: any) => string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The select options
         */
        "options": Array<Record<string, unknown>>;
        /**
          * The value selected of the component
         */
        "selectedOption"?: Record<string, unknown>;
        /**
          * Callback to extract the value from the option
         */
        "valueExtractor": (item: any) => string | number;
    }
    interface MInputSwitch {
        /**
          * Flag to change the check state
         */
        "isChecked"?: boolean;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Flag to disable the onMChange event
         */
        "isReadonly"?: boolean;
        /**
          * The text to display in the switch.
         */
        "label"?: string;
        /**
          * Id
         */
        "mId": string;
        /**
          * Id
         */
        "name"?: string;
    }
    interface MModal {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill' | 'center';
        /**
          * Minimum size to apply the fullscreen
         */
        "fullScreenFrom"?: FullScreenFrom;
        /**
          * Is modal centered
         */
        "isCentered"?: boolean;
        /**
          * Is fullscreen in all sizes
         */
        "isFullScreen"?: boolean;
        /**
          * Is modal scrollable
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * Modal size
         */
        "modalSize"?: ModalSize;
        /**
          * the name of the modal
         */
        "name": string;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MOffcanvas {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill';
        /**
          * Is body scrollable while offcanvas is active
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * the name of the offcanvas
         */
        "name": string;
        /**
          * Position to show offcanvas from
         */
        "openFrom"?: PositionToggleFrom;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MProgressBar {
        /**
          * Current progress value
         */
        "currentValue": number;
        /**
          * Enable striped animation
         */
        "enableStripedAnimation": boolean;
        /**
          * Hide current value
         */
        "hideCurrentValue"?: boolean | undefined;
        /**
          * Maximum value of the bar
         */
        "maxValue": number;
        /**
          * Minimum value of the bar
         */
        "minValue": number;
    }
    interface MQuickActionButton {
        /**
          * The icon to indicate the action
         */
        "actionIcon": string;
        /**
          * Icon family class
         */
        "actionIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyPrefix"?: string;
        /**
          * Action link text, displayed when the icon is not set
         */
        "actionLinkText"?: string;
        /**
          * Action link theme
         */
        "actionLinkTheme": string;
        /**
          * The title
         */
        "line1": string;
        /**
          * The subtitle
         */
        "line2": string;
        /**
          * Representative icon, displayed when the representativeImage is not set
         */
        "representativeIcon"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyPrefix"?: string;
        /**
          * Representative icon circle
         */
        "representativeIconHasCircle"?: boolean | undefined;
        /**
          * Representative icon theme
         */
        "representativeIconTheme": string;
        /**
          * Representative image
         */
        "representativeImage"?: string;
        /**
          * Second action icon
         */
        "secondaryActionIcon"?: string;
    }
    interface MQuickActionCheck {
        /**
          * Is selected
         */
        "isChecked"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * Line 3 text
         */
        "line3": string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Input value
         */
        "value": string;
    }
    interface MQuickActionSelect {
        /**
          * Is selected
         */
        "isSelected"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Input value
         */
        "value": string;
    }
    interface MQuickActionSwitch {
        /**
          * Hint to display
         */
        "hint": string;
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Is disabled
         */
        "isDisabled"?: boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
    }
}
export interface MAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMAlertElement;
}
export interface MButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMButtonElement;
}
export interface MChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMChipElement;
}
export interface MInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputElement;
}
export interface MInputCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputCheckElement;
}
export interface MInputCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputCounterElement;
}
export interface MInputCurrencyBaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputCurrencyBaseElement;
}
export interface MInputPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputPasswordElement;
}
export interface MInputPinCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputPinElement;
}
export interface MInputSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputSearchElement;
}
export interface MInputSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputSelectElement;
}
export interface MInputSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputSwitchElement;
}
export interface MModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMModalElement;
}
export interface MOffcanvasCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMOffcanvasElement;
}
export interface MQuickActionButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMQuickActionButtonElement;
}
export interface MQuickActionCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMQuickActionCheckElement;
}
export interface MQuickActionSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMQuickActionSelectElement;
}
export interface MQuickActionSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMQuickActionSwitchElement;
}
declare global {
    interface HTMLMAlertElement extends Components.MAlert, HTMLStencilElement {
    }
    var HTMLMAlertElement: {
        prototype: HTMLMAlertElement;
        new (): HTMLMAlertElement;
    };
    interface HTMLMBadgeElement extends Components.MBadge, HTMLStencilElement {
    }
    var HTMLMBadgeElement: {
        prototype: HTMLMBadgeElement;
        new (): HTMLMBadgeElement;
    };
    interface HTMLMButtonElement extends Components.MButton, HTMLStencilElement {
    }
    var HTMLMButtonElement: {
        prototype: HTMLMButtonElement;
        new (): HTMLMButtonElement;
    };
    interface HTMLMChipElement extends Components.MChip, HTMLStencilElement {
    }
    var HTMLMChipElement: {
        prototype: HTMLMChipElement;
        new (): HTMLMChipElement;
    };
    interface HTMLMIconElement extends Components.MIcon, HTMLStencilElement {
    }
    var HTMLMIconElement: {
        prototype: HTMLMIconElement;
        new (): HTMLMIconElement;
    };
    interface HTMLMInputElement extends Components.MInput, HTMLStencilElement {
    }
    var HTMLMInputElement: {
        prototype: HTMLMInputElement;
        new (): HTMLMInputElement;
    };
    interface HTMLMInputCheckElement extends Components.MInputCheck, HTMLStencilElement {
    }
    var HTMLMInputCheckElement: {
        prototype: HTMLMInputCheckElement;
        new (): HTMLMInputCheckElement;
    };
    interface HTMLMInputCounterElement extends Components.MInputCounter, HTMLStencilElement {
    }
    var HTMLMInputCounterElement: {
        prototype: HTMLMInputCounterElement;
        new (): HTMLMInputCounterElement;
    };
    interface HTMLMInputCurrencyBaseElement extends Components.MInputCurrencyBase, HTMLStencilElement {
    }
    var HTMLMInputCurrencyBaseElement: {
        prototype: HTMLMInputCurrencyBaseElement;
        new (): HTMLMInputCurrencyBaseElement;
    };
    interface HTMLMInputPasswordElement extends Components.MInputPassword, HTMLStencilElement {
    }
    var HTMLMInputPasswordElement: {
        prototype: HTMLMInputPasswordElement;
        new (): HTMLMInputPasswordElement;
    };
    interface HTMLMInputPinElement extends Components.MInputPin, HTMLStencilElement {
    }
    var HTMLMInputPinElement: {
        prototype: HTMLMInputPinElement;
        new (): HTMLMInputPinElement;
    };
    interface HTMLMInputSearchElement extends Components.MInputSearch, HTMLStencilElement {
    }
    var HTMLMInputSearchElement: {
        prototype: HTMLMInputSearchElement;
        new (): HTMLMInputSearchElement;
    };
    interface HTMLMInputSelectElement extends Components.MInputSelect, HTMLStencilElement {
    }
    var HTMLMInputSelectElement: {
        prototype: HTMLMInputSelectElement;
        new (): HTMLMInputSelectElement;
    };
    interface HTMLMInputSwitchElement extends Components.MInputSwitch, HTMLStencilElement {
    }
    var HTMLMInputSwitchElement: {
        prototype: HTMLMInputSwitchElement;
        new (): HTMLMInputSwitchElement;
    };
    interface HTMLMModalElement extends Components.MModal, HTMLStencilElement {
    }
    var HTMLMModalElement: {
        prototype: HTMLMModalElement;
        new (): HTMLMModalElement;
    };
    interface HTMLMOffcanvasElement extends Components.MOffcanvas, HTMLStencilElement {
    }
    var HTMLMOffcanvasElement: {
        prototype: HTMLMOffcanvasElement;
        new (): HTMLMOffcanvasElement;
    };
    interface HTMLMProgressBarElement extends Components.MProgressBar, HTMLStencilElement {
    }
    var HTMLMProgressBarElement: {
        prototype: HTMLMProgressBarElement;
        new (): HTMLMProgressBarElement;
    };
    interface HTMLMQuickActionButtonElement extends Components.MQuickActionButton, HTMLStencilElement {
    }
    var HTMLMQuickActionButtonElement: {
        prototype: HTMLMQuickActionButtonElement;
        new (): HTMLMQuickActionButtonElement;
    };
    interface HTMLMQuickActionCheckElement extends Components.MQuickActionCheck, HTMLStencilElement {
    }
    var HTMLMQuickActionCheckElement: {
        prototype: HTMLMQuickActionCheckElement;
        new (): HTMLMQuickActionCheckElement;
    };
    interface HTMLMQuickActionSelectElement extends Components.MQuickActionSelect, HTMLStencilElement {
    }
    var HTMLMQuickActionSelectElement: {
        prototype: HTMLMQuickActionSelectElement;
        new (): HTMLMQuickActionSelectElement;
    };
    interface HTMLMQuickActionSwitchElement extends Components.MQuickActionSwitch, HTMLStencilElement {
    }
    var HTMLMQuickActionSwitchElement: {
        prototype: HTMLMQuickActionSwitchElement;
        new (): HTMLMQuickActionSwitchElement;
    };
    interface HTMLElementTagNameMap {
        "m-alert": HTMLMAlertElement;
        "m-badge": HTMLMBadgeElement;
        "m-button": HTMLMButtonElement;
        "m-chip": HTMLMChipElement;
        "m-icon": HTMLMIconElement;
        "m-input": HTMLMInputElement;
        "m-input-check": HTMLMInputCheckElement;
        "m-input-counter": HTMLMInputCounterElement;
        "m-input-currency-base": HTMLMInputCurrencyBaseElement;
        "m-input-password": HTMLMInputPasswordElement;
        "m-input-pin": HTMLMInputPinElement;
        "m-input-search": HTMLMInputSearchElement;
        "m-input-select": HTMLMInputSelectElement;
        "m-input-switch": HTMLMInputSwitchElement;
        "m-modal": HTMLMModalElement;
        "m-offcanvas": HTMLMOffcanvasElement;
        "m-progress-bar": HTMLMProgressBarElement;
        "m-quick-action-button": HTMLMQuickActionButtonElement;
        "m-quick-action-check": HTMLMQuickActionCheckElement;
        "m-quick-action-select": HTMLMQuickActionSelectElement;
        "m-quick-action-switch": HTMLMQuickActionSwitchElement;
    }
}
declare namespace LocalJSX {
    interface MAlert {
        /**
          * Alert icon
         */
        "icon"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Emitted when the button has been clicked.
         */
        "onMClose"?: (event: MAlertCustomEvent<any>) => void;
        /**
          * Show close button
         */
        "showClose"?: boolean;
        /**
          * Show alert icon
         */
        "showIcon"?: boolean;
        /**
          * Alert type
         */
        "type"?: AlertType;
    }
    interface MBadge {
        /**
          * Enable dot mode
         */
        "isDot"?: boolean;
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme"?: string;
    }
    interface MButton {
        /**
          * Icon right to display
         */
        "iconEnd"?: string;
        /**
          * Icon right family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Icon right family prefix
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon left to display
         */
        "iconStart"?: string;
        /**
          * Icon left family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Icon left family prefix
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the button, alias to state="disable"
         */
        "isDisabled"?: boolean;
        /**
          * Flag to loading state and disable button.
         */
        "isLoading"?: boolean;
        /**
          * Flag to switch to pill button border radius.
         */
        "isPill"?: boolean;
        /**
          * Emitted when the button has been clicked.
         */
        "onMClick"?: (event: MButtonCustomEvent<any>) => void;
        /**
          * The size
         */
        "size"?: ComponentSize;
        /**
          * Change the state of the button
         */
        "state"?: InputState;
        /**
          * The text to display.
         */
        "text"?: string;
        /**
          * Theme to use.
         */
        "theme"?: string;
        /**
          * The html type of the button.
         */
        "type"?: ButtonType;
        /**
          * The html value of the button.
         */
        "value"?: string;
        /**
          * The variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface MChip {
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "iconFamilyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "iconFamilyPrefix"?: string;
        /**
          * Emitted when the close button has been clicked.
         */
        "onMClose"?: (event: MChipCustomEvent<any>) => void;
        /**
          * Show close icon
         */
        "showClose"?: boolean;
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme"?: string;
    }
    interface MIcon {
        /**
          * Icon background color in css color unit or var
         */
        "backgroundColor"?: string;
        /**
          * Circle size in css length unit
         */
        "circleSize"?: string;
        /**
          * Icon color in css color unit or var
         */
        "color"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "familyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "familyPrefix"?: string;
        /**
          * Add circle around the icon
         */
        "hasCircle"?: boolean;
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon": string;
        /**
          * Enable loading animation
         */
        "isLoading"?: boolean;
        /**
          * Loading animation duration, in seconds
         */
        "loadingDuration"?: number;
        /**
          * Size of the icon in css length unit
         */
        "size"?: string;
        /**
          * Theme of the icon
         */
        "theme"?: string;
    }
    interface MInput {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon to display on input right
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon to display on input left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * Input mode
         */
        "mInputMode"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when blur the input
         */
        "onMBlur"?: (event: MInputCustomEvent<any>) => void;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MInputCustomEvent<string | number>) => void;
        /**
          * Emitted when blur the input
         */
        "onMFocus"?: (event: MInputCustomEvent<any>) => void;
        /**
          * Emitted when click on the right icon
         */
        "onMIconEndClick"?: (event: MInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when click on the left icon
         */
        "onMIconStartClick"?: (event: MInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when blur the input
         */
        "onMWheel"?: (event: MInputCustomEvent<any>) => void;
        /**
          * Pattern to validate
         */
        "pattern"?: string;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The type of the input
         */
        "type"?: string;
        /**
          * The value of the input
         */
        "value"?: string | number;
    }
    interface MInputCheck {
        /**
          * Set checkbox or radio button marked as selected or not
         */
        "isChecked"?: boolean;
        /**
          * Set input as disabled
         */
        "isDisabled"?: boolean;
        /**
          * Set view of checkbox as indeterminated
         */
        "isIndeterminate"?: boolean;
        /**
          * Text that will be displayed beside Check input or Radio input
         */
        "label"?: string;
        /**
          * Form control identifier
         */
        "mId": string;
        /**
          * HTML Name to use within a form or JS reference
         */
        "name"?: string;
        /**
          * Emitted when the switch has changed
         */
        "onMChange"?: (event: MInputCheckCustomEvent<any>) => void;
        /**
          * Set whether is a checkbox input or a radio input
         */
        "type": FormCheckType;
        /**
          * A string representing the value of the checkbox or radio
         */
        "value"?: string;
    }
    interface MInputCounter {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue": number;
        /**
          * * The min value of the input
         */
        "minValue": number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Event for input change
         */
        "onMChange"?: (event: MInputCounterCustomEvent<number>) => void;
        /**
          * Event for button pressed
         */
        "onMClick"?: (event: MInputCounterCustomEvent<number>) => void;
        /**
          * The value of the input
         */
        "value": number;
    }
    interface MInputCurrencyBase {
        /**
          * Currency code
         */
        "currencyCode"?: string;
        /**
          * Options for the m-input-currency-base
         */
        "currencyOptions": Options;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue"?: number;
        /**
          * * The min value of the input
         */
        "minValue"?: number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the inputs change
         */
        "onMChange"?: (event: MInputCurrencyBaseCustomEvent<number>) => void;
        /**
          * Placeholder for the input
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: number;
    }
    interface MInputPassword {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MInputPasswordCustomEvent<string>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface MInputPin {
        /**
          * Number of characters of the pin
         */
        "characters"?: number;
        /**
          * Hint for the m-coupon
         */
        "hint"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Hide the characters
         */
        "isSecret"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Id for the input
         */
        "mId": string;
        /**
          * Keyboard style
         */
        "mInputMode"?: PinInputMode;
        /**
          * Emitted when the inputs had changed
         */
        "onMChange"?: (event: MInputPinCustomEvent<string>) => void;
        /**
          * Placeholder of the inputs
         */
        "placeholder"?: string;
        /**
          * Type of the inputs
         */
        "type"?: PinInputType;
    }
    interface MInputSearch {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MInputSearchCustomEvent<string>) => void;
        /**
          * Emitted when the button is clicked
         */
        "onMClick"?: (event: MInputSearchCustomEvent<string>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface MInputSelect {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * The end icon for the select
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * The start icon for the select
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Callback to extract the label from the option
         */
        "labelExtractor"?: (item: any) => string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when blur the input
         */
        "onMBlur"?: (event: MInputSelectCustomEvent<any>) => void;
        /**
          * Emitted when the select value has changed
         */
        "onMChange"?: (event: MInputSelectCustomEvent<any>) => void;
        /**
          * Emitted when click on the right icon
         */
        "onMIconEndClick"?: (event: MInputSelectCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when click on the left icon
         */
        "onMIconStartClick"?: (event: MInputSelectCustomEvent<MouseEvent>) => void;
        /**
          * The select options
         */
        "options"?: Array<Record<string, unknown>>;
        /**
          * The value selected of the component
         */
        "selectedOption"?: Record<string, unknown>;
        /**
          * Callback to extract the value from the option
         */
        "valueExtractor"?: (item: any) => string | number;
    }
    interface MInputSwitch {
        /**
          * Flag to change the check state
         */
        "isChecked"?: boolean;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Flag to disable the onMChange event
         */
        "isReadonly"?: boolean;
        /**
          * The text to display in the switch.
         */
        "label"?: string;
        /**
          * Id
         */
        "mId": string;
        /**
          * Id
         */
        "name"?: string;
        /**
          * Emitted when the switch has changed
         */
        "onMChange"?: (event: MInputSwitchCustomEvent<boolean>) => void;
    }
    interface MModal {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill' | 'center';
        /**
          * Minimum size to apply the fullscreen
         */
        "fullScreenFrom"?: FullScreenFrom;
        /**
          * Is modal centered
         */
        "isCentered"?: boolean;
        /**
          * Is fullscreen in all sizes
         */
        "isFullScreen"?: boolean;
        /**
          * Is modal scrollable
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * Modal size
         */
        "modalSize"?: ModalSize;
        /**
          * the name of the modal
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onMClose"?: (event: MModalCustomEvent<void>) => void;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MOffcanvas {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill';
        /**
          * Is body scrollable while offcanvas is active
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * the name of the offcanvas
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onMClose"?: (event: MOffcanvasCustomEvent<void>) => void;
        /**
          * Position to show offcanvas from
         */
        "openFrom"?: PositionToggleFrom;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MProgressBar {
        /**
          * Current progress value
         */
        "currentValue": number;
        /**
          * Enable striped animation
         */
        "enableStripedAnimation"?: boolean;
        /**
          * Hide current value
         */
        "hideCurrentValue"?: boolean | undefined;
        /**
          * Maximum value of the bar
         */
        "maxValue"?: number;
        /**
          * Minimum value of the bar
         */
        "minValue"?: number;
    }
    interface MQuickActionButton {
        /**
          * The icon to indicate the action
         */
        "actionIcon"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyPrefix"?: string;
        /**
          * Action link text, displayed when the icon is not set
         */
        "actionLinkText"?: string;
        /**
          * Action link theme
         */
        "actionLinkTheme"?: string;
        /**
          * The title
         */
        "line1": string;
        /**
          * The subtitle
         */
        "line2": string;
        /**
          * Emitted when the input value has changed
         */
        "onMClick"?: (event: MQuickActionButtonCustomEvent<any>) => void;
        /**
          * Emitted when the input value has changed
         */
        "onMClickSecondary"?: (event: MQuickActionButtonCustomEvent<any>) => void;
        /**
          * Representative icon, displayed when the representativeImage is not set
         */
        "representativeIcon"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyPrefix"?: string;
        /**
          * Representative icon circle
         */
        "representativeIconHasCircle"?: boolean | undefined;
        /**
          * Representative icon theme
         */
        "representativeIconTheme"?: string;
        /**
          * Representative image
         */
        "representativeImage"?: string;
        /**
          * Second action icon
         */
        "secondaryActionIcon"?: string;
    }
    interface MQuickActionCheck {
        /**
          * Is selected
         */
        "isChecked"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * Line 3 text
         */
        "line3": string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Emitted when the select value has changed
         */
        "onMChange"?: (event: MQuickActionCheckCustomEvent<string>) => void;
        /**
          * Input value
         */
        "value": string;
    }
    interface MQuickActionSelect {
        /**
          * Is selected
         */
        "isSelected"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Emitted when the select value has changed
         */
        "onMChange"?: (event: MQuickActionSelectCustomEvent<string>) => void;
        /**
          * Input value
         */
        "value": string;
    }
    interface MQuickActionSwitch {
        /**
          * Hint to display
         */
        "hint": string;
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Is disabled
         */
        "isDisabled"?: boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the select value has changed
         */
        "onMClick"?: (event: MQuickActionSwitchCustomEvent<boolean>) => void;
    }
    interface IntrinsicElements {
        "m-alert": MAlert;
        "m-badge": MBadge;
        "m-button": MButton;
        "m-chip": MChip;
        "m-icon": MIcon;
        "m-input": MInput;
        "m-input-check": MInputCheck;
        "m-input-counter": MInputCounter;
        "m-input-currency-base": MInputCurrencyBase;
        "m-input-password": MInputPassword;
        "m-input-pin": MInputPin;
        "m-input-search": MInputSearch;
        "m-input-select": MInputSelect;
        "m-input-switch": MInputSwitch;
        "m-modal": MModal;
        "m-offcanvas": MOffcanvas;
        "m-progress-bar": MProgressBar;
        "m-quick-action-button": MQuickActionButton;
        "m-quick-action-check": MQuickActionCheck;
        "m-quick-action-select": MQuickActionSelect;
        "m-quick-action-switch": MQuickActionSwitch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "m-alert": LocalJSX.MAlert & JSXBase.HTMLAttributes<HTMLMAlertElement>;
            "m-badge": LocalJSX.MBadge & JSXBase.HTMLAttributes<HTMLMBadgeElement>;
            "m-button": LocalJSX.MButton & JSXBase.HTMLAttributes<HTMLMButtonElement>;
            "m-chip": LocalJSX.MChip & JSXBase.HTMLAttributes<HTMLMChipElement>;
            "m-icon": LocalJSX.MIcon & JSXBase.HTMLAttributes<HTMLMIconElement>;
            "m-input": LocalJSX.MInput & JSXBase.HTMLAttributes<HTMLMInputElement>;
            "m-input-check": LocalJSX.MInputCheck & JSXBase.HTMLAttributes<HTMLMInputCheckElement>;
            "m-input-counter": LocalJSX.MInputCounter & JSXBase.HTMLAttributes<HTMLMInputCounterElement>;
            "m-input-currency-base": LocalJSX.MInputCurrencyBase & JSXBase.HTMLAttributes<HTMLMInputCurrencyBaseElement>;
            "m-input-password": LocalJSX.MInputPassword & JSXBase.HTMLAttributes<HTMLMInputPasswordElement>;
            "m-input-pin": LocalJSX.MInputPin & JSXBase.HTMLAttributes<HTMLMInputPinElement>;
            "m-input-search": LocalJSX.MInputSearch & JSXBase.HTMLAttributes<HTMLMInputSearchElement>;
            "m-input-select": LocalJSX.MInputSelect & JSXBase.HTMLAttributes<HTMLMInputSelectElement>;
            "m-input-switch": LocalJSX.MInputSwitch & JSXBase.HTMLAttributes<HTMLMInputSwitchElement>;
            "m-modal": LocalJSX.MModal & JSXBase.HTMLAttributes<HTMLMModalElement>;
            "m-offcanvas": LocalJSX.MOffcanvas & JSXBase.HTMLAttributes<HTMLMOffcanvasElement>;
            "m-progress-bar": LocalJSX.MProgressBar & JSXBase.HTMLAttributes<HTMLMProgressBarElement>;
            "m-quick-action-button": LocalJSX.MQuickActionButton & JSXBase.HTMLAttributes<HTMLMQuickActionButtonElement>;
            "m-quick-action-check": LocalJSX.MQuickActionCheck & JSXBase.HTMLAttributes<HTMLMQuickActionCheckElement>;
            "m-quick-action-select": LocalJSX.MQuickActionSelect & JSXBase.HTMLAttributes<HTMLMQuickActionSelectElement>;
            "m-quick-action-switch": LocalJSX.MQuickActionSwitch & JSXBase.HTMLAttributes<HTMLMQuickActionSwitchElement>;
        }
    }
}
