{"file":"d-input-pin.entry.js","mappings":"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","names":[],"sources":["./src/components/d-input-pin/d-input-pin.tsx"],"sourcesContent":["import {\n  Component,\n  h,\n  Prop,\n  Event,\n  State,\n  Watch,\n} from '@stencil/core';\nimport type { ComponentInterface, EventEmitter } from '@stencil/core';\n\nimport { PREFIX_BS } from '../../utils';\n\nimport { PinInputMode, PinInputType } from './d-input-pin-interface';\n\n@Component({ tag: 'd-input-pin' })\nexport class DInputPin implements ComponentInterface {\n  /**\n   * Id for the input\n   * */\n  @Prop() innerId!: string;\n\n  /**\n   * The label text\n   */\n  @Prop() label = '';\n\n  /**\n   * Icon for the label text\n   */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family prefix\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n   * Placeholder of the inputs\n   */\n  @Prop() placeholder?: string = 'â€¢';\n\n  /**\n   * Type of the inputs\n   */\n  @Prop() type: PinInputType = 'text';\n\n  /**\n   * Flag to disable the input\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n   */\n  @Prop() isLoading = false;\n\n  /**\n   * Hide the characters\n   */\n  @Prop() isSecret = false;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyPrefix?: string;\n\n  /**\n   * Number of characters of the pin\n   */\n  @Prop() characters = 4;\n\n  /**\n   * Keyboard style\n   */\n  @Prop() innerInputMode: PinInputMode = 'text';\n\n  /**\n   * Hint for the input\n   * */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * Emitted when the inputs had changed\n   */\n  @Event() eventChange!: EventEmitter<string>;\n\n  @State() pattern!: string;\n\n  @Watch('type')\n  watchMTypeHandler(newValue: string) {\n    this.pattern = newValue === 'number' ? '[0-9]+' : '^[a-zA-Z0-9]+$';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private nextInput = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n    const regex = new RegExp(this.pattern);\n\n    if (!regex.test(input.value)) {\n      input.value = '';\n    }\n\n    if (input.value !== '') {\n      if (input.nextSibling) {\n        (input.nextSibling as HTMLElement)?.focus();\n      } else {\n        input.blur();\n      }\n    }\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private prevInput = (e: KeyboardEvent) => {\n    if (e.key === 'Backspace') {\n      const { value } = e.currentTarget as HTMLInputElement;\n      const input = e.target as HTMLInputElement;\n\n      if (input.previousSibling && value === '') {\n        (input.previousSibling as HTMLElement)?.focus();\n      } else {\n        input.blur();\n        input.focus();\n      }\n    }\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private focusInput = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n    input.value = '';\n    this.eventChange.emit('');\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private wheelInput = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n    // prevent change the value with the scroll\n    input.blur();\n  };\n\n  private formChange = (e: Event) => {\n    const form = e.currentTarget as HTMLFormElement;\n    const formData = new FormData(form);\n    const values = Array.from(formData.values()).join('');\n    this.eventChange.emit(values);\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private preventDefaultEvents = (e: Event) => {\n    e.preventDefault();\n  };\n\n  connectedCallback() {\n    this.pattern = this.type === 'number' ? '[0-9]+' : '^[a-zA-Z0-9]+$';\n  }\n\n  render() {\n    return (\n      <div class=\"d-input-pin\">\n        {this.label && (\n          <label htmlFor=\"pinIndex0\">\n            {this.label}\n            {this.labelIcon && (\n              <d-icon\n                class=\"d-input-pin-icon\"\n                icon={this.labelIcon}\n                size={`var(--${PREFIX_BS}input-label-font-size)`}\n                familyClass={this.labelIconFamilyClass}\n                familyPrefix={this.labelIconFamilyPrefix}\n              />\n            )}\n          </label>\n        )}\n        <form\n          id={this.innerId}\n          class=\"d-input-pin-controls\"\n          onInput={this.formChange}\n          onSubmit={this.preventDefaultEvents}\n        >\n          {Array.from({ length: this.characters }).map((_, index) => (\n            <input\n              class={{\n                'form-control': true,\n                'is-invalid': this.isInvalid,\n                'is-valid': this.isValid,\n              }}\n              type={this.isSecret ? 'password' : this.type}\n              aria-describedby={`${this.innerId}State`}\n              inputMode={this.innerInputMode}\n              id={`pinIndex${index}`}\n              name={`pin-${index}`}\n              maxLength={1}\n              onInput={this.nextInput}\n              onKeyDown={this.prevInput}\n              onFocus={this.focusInput}\n              onWheel={this.wheelInput}\n              onClick={this.preventDefaultEvents}\n              autocomplete=\"off\"\n              placeholder={this.placeholder}\n              disabled={this.isDisabled || this.isLoading}\n              required\n              {...this.type === 'number' && (\n                {\n                  min: 0,\n                  max: 9,\n                }\n              )}\n            />\n          ))}\n          {((this.isInvalid || this.isValid) && !this.isLoading) && (\n            <span\n              class=\"input-group-text\"\n              id={`${this.innerId}State`}\n            >\n              <d-icon\n                class=\"d-input-pin-validation-icon\"\n                icon={this.isInvalid ? 'exclamation-circle' : 'check'}\n                familyClass={this.iconFamilyClass}\n                familyPrefix={this.iconFamilyPrefix}\n              />\n            </span>\n          )}\n          {this.isLoading && (\n            <div class=\"input-group-text d-input-pin-icon\">\n              <span\n                class=\"spinner-border spinner-border-sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              >\n                <span class=\"visually-hidden\">Loading...</span>\n              </span>\n            </div>\n          )}\n        </form>\n        {this.hint && (\n          <div\n            class=\"form-text\"\n            id={`${this.innerId}Hint`}\n          >\n            {this.hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"version":3}