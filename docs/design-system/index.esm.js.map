{"version":3,"names":["liquidParser","library","engine","undefined","init","Liquid","this","strictFilters","strictVariables","async","liquidString","parseAndRender","error","message","parseLiquid","parseAndRenderSync","parse","parseLiquidAsync","formatCurrency","amount","options","currency","format","createControlledRequest","client","config","abortController","AbortController","perform","data","request","Object","assign","signal","abort","Deferred","constructor","promise","Promise","resolve","reject","createMockedRequest","deferred","timer","setTimeout","Error","clearTimeout"],"sources":["./src/utils/liquid-parser.ts","./src/utils/format-currency.ts","./src/utils/create-controlled-request.ts","./src/utils/Deferred.ts","./src/utils/create-mocked-request.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default {\n  library: {},\n  engine: undefined as any,\n  init(library: any, Liquid: any) {\n    this.library = library;\n\n    if (Liquid) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires,global-require\n      this.engine = new Liquid.Liquid({\n        strictFilters: true,\n        strictVariables: true,\n      });\n    }\n  },\n  /**\n   * Parse a liquid string\n   * @param liquidString Target Content Space UID\n   * @returns a usable object or string\n   */\n  async parseLiquidAsync(liquidString: string): Promise<string> {\n    try {\n      return this.engine.parseAndRender(liquidString, this.library);\n    } catch (error: any) {\n      return error.message;\n    }\n  },\n  /**\n   * Parse a liquid string\n   * @param liquidString Target Content Space UID\n   * @returns a usable object or string\n   */\n  parseLiquid(liquidString: string): string {\n    try {\n      return this.engine.parseAndRenderSync(liquidString, this.library);\n    } catch (error: any) {\n      return error.message;\n    }\n  },\n  parse(liquidString: string): string {\n    if (this.engine) {\n      return this.parseLiquid(liquidString);\n    }\n    return liquidString;\n  },\n  async parseAsync(liquidString: string): Promise<string> {\n    if (this.engine) {\n      return this.parseLiquidAsync(liquidString);\n    }\n    return liquidString;\n  },\n};\n","import currency from 'currency.js';\nimport type { Options } from 'currency.js';\n\nexport default function formatCurrency(\n  amount: number,\n  options: Options,\n): string {\n  return currency(amount, options).format();\n}\n","import {\n  AxiosInstance,\n  AxiosRequestConfig,\n} from 'axios';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ControlledRequest<ResponseData, RequestData = any> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any,max-len\n  perform: (config?: { data?: RequestData; params?: any }) => Promise<ResponseData>;\n  abort: () => void;\n};\n\n/**\n * @deprecated\n * @param client\n * @param config\n */\nexport default function createControlledRequest<T, R = T>(\n  client: AxiosInstance,\n  config: AxiosRequestConfig<T>,\n): ControlledRequest<R, T> {\n  const abortController = new AbortController();\n  return {\n    perform: async () => {\n      const { data } = await client.request<R>({\n        ...config,\n        signal: abortController.signal,\n      });\n      return data;\n    },\n    abort: () => abortController.abort(),\n  };\n}\n","export default class Deferred<T> {\n  resolve!: ((value: T) => void);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reject!: ((reason: any) => void);\n\n  promise: Promise<T>;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n","import Deferred from './Deferred';\n\n/**\n * @deprecated\n * @param config\n * @param data\n */\nexport default function createMockedRequest<T, R = T>(\n  data: R,\n) {\n  const deferred = new Deferred<void>();\n  const timer = setTimeout(() => deferred.resolve(), 1000);\n  return {\n    abort: () => {\n      deferred.reject(new Error('AbortError'));\n      clearTimeout(timer);\n    },\n    perform: async (): Promise<R> => {\n      await deferred.promise;\n      return data as unknown as R;\n    },\n  };\n}\n"],"mappings":"sPACA,MAAAA,EAAe,CACbC,QAAS,GACTC,OAAQC,UACRC,KAAKH,EAAcI,GACjBC,KAAKL,QAAUA,EAEf,GAAII,EAAQ,CAEVC,KAAKJ,OAAS,IAAIG,EAAOA,OAAO,CAC9BE,cAAe,KACfC,gBAAiB,M,GASvBC,uBAAuBC,GACrB,IACE,OAAOJ,KAAKJ,OAAOS,eAAeD,EAAcJ,KAAKL,Q,CACrD,MAAOW,GACP,OAAOA,EAAMC,O,GAQjBC,YAAYJ,GACV,IACE,OAAOJ,KAAKJ,OAAOa,mBAAmBL,EAAcJ,KAAKL,Q,CACzD,MAAOW,GACP,OAAOA,EAAMC,O,GAGjBG,MAAMN,GACJ,GAAIJ,KAAKJ,OAAQ,CACf,OAAOI,KAAKQ,YAAYJ,E,CAE1B,OAAOA,C,EAETD,iBAAiBC,GACf,GAAIJ,KAAKJ,OAAQ,CACf,OAAOI,KAAKW,iBAAiBP,E,CAE/B,OAAOA,C,YC9CaQ,EACtBC,EACAC,GAEA,OAAOC,EAASF,EAAQC,GAASE,QACnC,C,SCSwBC,EACtBC,EACAC,GAEA,MAAMC,EAAkB,IAAIC,gBAC5B,MAAO,CACLC,QAASnB,UACP,MAAMoB,KAAEA,SAAeL,EAAOM,QAAOC,OAAAC,OAAAD,OAAAC,OAAA,GAChCP,GAAM,CACTQ,OAAQP,EAAgBO,UAE1B,OAAOJ,CAAI,EAEbK,MAAO,IAAMR,EAAgBQ,QAEjC,C,MChCqBC,EAQnBC,cACE9B,KAAK+B,QAAU,IAAIC,SAAQ,CAACC,EAASC,KACnClC,KAAKiC,QAAUA,EACfjC,KAAKkC,OAASA,CAAM,G,WCJFC,EACtBZ,GAEA,MAAMa,EAAW,IAAIP,EACrB,MAAMQ,EAAQC,YAAW,IAAMF,EAASH,WAAW,KACnD,MAAO,CACLL,MAAO,KACLQ,EAASF,OAAO,IAAIK,MAAM,eAC1BC,aAAaH,EAAM,EAErBf,QAASnB,gBACDiC,EAASL,QACf,OAAOR,CAAoB,EAGjC,Q"}