{"version":3,"names":["MInputCurrencyBase","this","changeHandler","event","stopPropagation","internalValueAsNumber","detail","parseFloat","undefined","internalValueAsFormat","currency","currencyOptions","format","mChange","emit","blurHandler","internalType","focusHandler","wheelHandler","_a","htmlMInputElement","blurInput","watchValueHandler","newValue","internalIsInvalid","isValidValue","value","minValue","maxValue","valueAsType","connectedCallback","componentDidLoad","generateStyleVariables","PREFIX_BS","generateSymbolStyleVariables","color","render","h","ref","el","style","mId","name","label","labelIcon","labelIconFamilyClass","labelIconFamilyPrefix","placeholder","iconStart","iconStartFamilyClass","iconStartFamilyPrefix","iconEnd","iconEndFamilyClass","iconEndFamilyPrefix","isDisabled","isReadOnly","isLoading","hint","isInvalid","isValid","type","mInputMode","pattern","onMChange","onMBlur","onMFocus","onMWheel","slot","currencyCode","symbol"],"sources":["./src/components/m-input-currency-base/m-input-currency-base.tsx"],"sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  h,\n  Prop,\n  Event,\n  Watch,\n  State,\n} from '@stencil/core';\nimport currency from 'currency.js';\nimport type { Options } from 'currency.js';\n\nimport { PREFIX_BS } from '../../utils';\n\n@Component({ tag: 'm-input-currency-base' })\nexport class MInputCurrencyBase implements ComponentInterface {\n  /**\n   * The id of the input\n   */\n  @Prop() mId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n   * The label text\n   */\n  @Prop() label = '';\n\n  /**\n   * Icon for the label text\n   */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n   * Placeholder for the input\n   */\n  @Prop() placeholder?: string = '';\n\n  /**\n   * The value of the input\n   */\n  @Prop() value?: number;\n\n  /**\n   * The input is disabled\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n   */\n  @Prop() isLoading = false;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyPrefix?: string;\n\n  /**\n   * Icon for the left\n   * */\n  @Prop() iconStart?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyClass?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyPrefix?: string;\n\n  /**\n   * Icon for the end\n   * */\n  @Prop() iconEnd?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyPrefix?: string;\n\n  /**\n   * Hint to display\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * * The min value of the input\n  */\n  @Prop() minValue?: number;\n\n  /**\n   * * The max value of the input\n  */\n  @Prop() maxValue?: number;\n\n  /**\n   * Options for the m-input-currency-base\n   */\n  @Prop() currencyOptions!: Options;\n\n  /**\n   * Currency code\n   */\n  @Prop() currencyCode?: string;\n\n  /**\n   * Emitted when the inputs change\n   */\n  @Event({ eventName: 'mChange' }) mChange!: EventEmitter<number>;\n\n  @State() internalValueAsNumber?: number;\n\n  @State() internalValueAsFormat?: string;\n\n  @State() internalType: 'text' | 'number' = 'text';\n\n  @State() internalIsInvalid = false;\n\n  @Watch('value')\n  watchValueHandler(newValue: number) {\n    this.internalIsInvalid = !this.isValidValue(newValue);\n  }\n\n  /**\n   * HTML m-input element\n   */\n  private htmlMInputElement?: HTMLMInputElement;\n\n  /**\n   * Emit input and select values when the values change\n   */\n  private changeHandler = (event: CustomEvent<string | number>) => {\n    event.stopPropagation();\n    this.internalValueAsNumber = (event.detail !== '' && typeof event.detail === 'string')\n      ? parseFloat(event.detail)\n      : undefined;\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined\n      ? currency(this.internalValueAsNumber, this.currencyOptions).format()\n      : '';\n    this.mChange.emit(this.internalValueAsNumber);\n  };\n\n  private blurHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.internalType = 'text';\n\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined\n      ? currency(this.internalValueAsNumber, this.currencyOptions).format()\n      : '';\n  };\n\n  private focusHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.internalType = 'number';\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined\n      ? currency(this.internalValueAsNumber, this.currencyOptions).format()\n      : '';\n  };\n\n  private wheelHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.htmlMInputElement?.blurInput();\n  };\n\n  private isValidValue(value?: number): boolean {\n    if (value === undefined) {\n      return true;\n    }\n\n    if (this.internalType === 'number') {\n      return (\n        (this.minValue !== undefined ? value >= this.minValue : true)\n        && (this.maxValue !== undefined ? value <= this.maxValue : true)\n      );\n    }\n\n    return true;\n  }\n\n  private valueAsType() {\n    if (this.internalType === 'number') {\n      return this.internalValueAsNumber;\n    }\n\n    return this.internalValueAsFormat;\n  }\n\n  connectedCallback() {\n    this.internalValueAsNumber = this.value;\n  }\n\n  componentDidLoad() {\n    this.internalType = 'text';\n    this.internalValueAsFormat = (this.internalValueAsNumber !== undefined)\n      ? currency(this.internalValueAsNumber, this.currencyOptions).format()\n      : '';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private generateStyleVariables() {\n    return {\n      [`--${PREFIX_BS}m-input-currency-component-symbol-color`]: `var(--${PREFIX_BS}secondary)`,\n      [`--${PREFIX_BS}m-input-currency-symbol-color`]: `var(--${PREFIX_BS}m-input-currency-component-symbol-color)`,\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private generateSymbolStyleVariables() {\n    return { color: `var(--${PREFIX_BS}m-input-currency-symbol-color)` };\n  }\n\n  render() {\n    return (\n      <m-input// eslint-disable-next-line no-return-assign\n        ref={(el) => (this.htmlMInputElement = el)}\n        style={this.generateStyleVariables()}\n        mId={this.mId}\n        name={this.name}\n        label={this.label}\n        labelIcon={this.labelIcon}\n        labelIconFamilyClass={this.labelIconFamilyClass}\n        labelIconFamilyPrefix={this.labelIconFamilyPrefix}\n        placeholder={this.placeholder}\n        value={this.valueAsType()}\n        iconStart={this.iconStart}\n        iconStartFamilyClass={this.iconStartFamilyClass}\n        iconStartFamilyPrefix={this.iconStartFamilyPrefix}\n        iconEnd={this.iconEnd}\n        iconEndFamilyClass={this.iconEndFamilyClass}\n        iconEndFamilyPrefix={this.iconEndFamilyPrefix}\n        isDisabled={this.isDisabled}\n        isReadOnly={this.isReadOnly}\n        isLoading={this.isLoading}\n        hint={this.hint}\n        isInvalid={this.isInvalid}\n        isValid={this.isValid}\n        type={this.internalType}\n        mInputMode=\"decimal\"\n        pattern=\"^[0-9]\"\n        onMChange={this.changeHandler}\n        onMBlur={this.blurHandler}\n        onMFocus={this.focusHandler}\n        onMWheel={this.wheelHandler}\n      >\n        <span\n          slot=\"input-start\"\n          style={this.generateSymbolStyleVariables()}\n        >\n          {this.currencyCode || this.currencyOptions.symbol}\n        </span>\n      </m-input>\n    );\n  }\n}\n"],"mappings":"gIAeaA,EAAkB,M,0DA6JrBC,KAAAC,cAAiBC,IACvBA,EAAMC,kBACNH,KAAKI,sBAAyBF,EAAMG,SAAW,WAAaH,EAAMG,SAAW,SACzEC,WAAWJ,EAAMG,QACjBE,UACJP,KAAKQ,sBAAwBR,KAAKI,wBAA0BG,UACxDE,EAAST,KAAKI,sBAAuBJ,KAAKU,iBAAiBC,SAC3D,GACJX,KAAKY,QAAQC,KAAKb,KAAKI,sBAAsB,EAGvCJ,KAAAc,YAAeZ,IACrBA,EAAMC,kBACNH,KAAKe,aAAe,OAEpBf,KAAKQ,sBAAwBR,KAAKI,wBAA0BG,UACxDE,EAAST,KAAKI,sBAAuBJ,KAAKU,iBAAiBC,SAC3D,EAAE,EAGAX,KAAAgB,aAAgBd,IACtBA,EAAMC,kBACNH,KAAKe,aAAe,SACpBf,KAAKQ,sBAAwBR,KAAKI,wBAA0BG,UACxDE,EAAST,KAAKI,sBAAuBJ,KAAKU,iBAAiBC,SAC3D,EAAE,EAGAX,KAAAiB,aAAgBf,I,MACtBA,EAAMC,mBACNe,EAAAlB,KAAKmB,qBAAiB,MAAAD,SAAA,SAAAA,EAAEE,WAAW,E,kDA7KrB,G,mHAoBe,G,qCAUV,M,gBAKA,M,eAKD,M,gSAkDA,M,aAKF,M,uMA+ByB,O,uBAEd,K,CAG7BC,kBAAkBC,GAChBtB,KAAKuB,mBAAqBvB,KAAKwB,aAAaF,E,CA4CtCE,aAAaC,GACnB,GAAIA,IAAUlB,UAAW,CACvB,OAAO,I,CAGT,GAAIP,KAAKe,eAAiB,SAAU,CAClC,OACGf,KAAK0B,WAAanB,UAAYkB,GAASzB,KAAK0B,SAAW,QACpD1B,KAAK2B,WAAapB,UAAYkB,GAASzB,KAAK2B,SAAW,K,CAI/D,OAAO,I,CAGDC,cACN,GAAI5B,KAAKe,eAAiB,SAAU,CAClC,OAAOf,KAAKI,qB,CAGd,OAAOJ,KAAKQ,qB,CAGdqB,oBACE7B,KAAKI,sBAAwBJ,KAAKyB,K,CAGpCK,mBACE9B,KAAKe,aAAe,OACpBf,KAAKQ,sBAAyBR,KAAKI,wBAA0BG,UACzDE,EAAST,KAAKI,sBAAuBJ,KAAKU,iBAAiBC,SAC3D,E,CAIEoB,yBACN,MAAO,CACL,CAAC,KAAKC,4CAAqD,SAASA,cACpE,CAAC,KAAKA,kCAA2C,SAASA,4C,CAKtDC,+BACN,MAAO,CAAEC,MAAO,SAASF,kC,CAG3BG,SACE,OACEC,EAAA,WACEC,IAAMC,GAAQtC,KAAKmB,kBAAoBmB,EACvCC,MAAOvC,KAAK+B,yBACZS,IAAKxC,KAAKwC,IACVC,KAAMzC,KAAKyC,KACXC,MAAO1C,KAAK0C,MACZC,UAAW3C,KAAK2C,UAChBC,qBAAsB5C,KAAK4C,qBAC3BC,sBAAuB7C,KAAK6C,sBAC5BC,YAAa9C,KAAK8C,YAClBrB,MAAOzB,KAAK4B,cACZmB,UAAW/C,KAAK+C,UAChBC,qBAAsBhD,KAAKgD,qBAC3BC,sBAAuBjD,KAAKiD,sBAC5BC,QAASlD,KAAKkD,QACdC,mBAAoBnD,KAAKmD,mBACzBC,oBAAqBpD,KAAKoD,oBAC1BC,WAAYrD,KAAKqD,WACjBC,WAAYtD,KAAKsD,WACjBC,UAAWvD,KAAKuD,UAChBC,KAAMxD,KAAKwD,KACXC,UAAWzD,KAAKyD,UAChBC,QAAS1D,KAAK0D,QACdC,KAAM3D,KAAKe,aACX6C,WAAW,UACXC,QAAQ,SACRC,UAAW9D,KAAKC,cAChB8D,QAAS/D,KAAKc,YACdkD,SAAUhE,KAAKgB,aACfiD,SAAUjE,KAAKiB,cAEfmB,EAAA,QACE8B,KAAK,cACL3B,MAAOvC,KAAKiC,gCAEXjC,KAAKmE,cAAgBnE,KAAKU,gBAAgB0D,Q"}