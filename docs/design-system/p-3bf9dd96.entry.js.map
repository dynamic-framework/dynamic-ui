{"version":3,"names":["MInputPin","this","nextInput","e","input","target","regex","RegExp","pattern","test","value","nextSibling","_a","focus","blur","prevInput","key","currentTarget","previousSibling","focusInput","mChange","emit","wheelInput","formChange","form","formData","FormData","values","Array","from","join","preventDefaultEvents","preventDefault","watchMTypeHandler","newValue","connectedCallback","type","render","h","class","label","htmlFor","labelIcon","icon","size","PREFIX_BS","familyClass","labelIconFamilyClass","familyPrefix","labelIconFamilyPrefix","id","mId","onInput","onSubmit","length","characters","map","_","index","Object","assign","isInvalid","isValid","isSecret","inputMode","mInputMode","name","maxLength","onKeyDown","onFocus","onWheel","onClick","autocomplete","placeholder","disabled","isDisabled","isLoading","required","min","max","iconFamilyClass","iconFamilyPrefix","role","hint"],"sources":["./src/components/m-input-pin/m-input-pin.tsx"],"sourcesContent":["import {\n  Component,\n  h,\n  Prop,\n  Event,\n  State,\n  Watch,\n} from '@stencil/core';\nimport type { ComponentInterface, EventEmitter } from '@stencil/core';\n\nimport { PREFIX_BS } from '../../utils';\n\nimport { PinInputMode, PinInputType } from './m-input-pin-interface';\n\n@Component({ tag: 'm-input-pin' })\nexport class MInputPin implements ComponentInterface {\n  /**\n   * Id for the input\n   * */\n  @Prop() mId!: string;\n\n  /**\n   * The label text\n   */\n  @Prop() label = '';\n\n  /**\n   * Icon for the label text\n   */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family prefix\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n   * Placeholder of the inputs\n   */\n  @Prop() placeholder?: string = 'â€¢';\n\n  /**\n   * Type of the inputs\n   */\n  @Prop() type: PinInputType = 'text';\n\n  /**\n   * Flag to disable the input\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n   */\n  @Prop() isLoading = false;\n\n  /**\n   * Hide the characters\n   */\n  @Prop() isSecret = false;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyPrefix?: string;\n\n  /**\n   * Number of characters of the pin\n   */\n  @Prop() characters = 4;\n\n  /**\n   * Keyboard style\n   */\n  @Prop() mInputMode: PinInputMode = 'text';\n\n  /**\n   * Hint for the m-coupon\n   * */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * Emitted when the inputs had changed\n   */\n  @Event({ eventName: 'mChange' }) mChange!: EventEmitter<string>;\n\n  @State() pattern!: string;\n\n  @Watch('type')\n  watchMTypeHandler(newValue: string) {\n    this.pattern = newValue === 'number' ? '[0-9]+' : '^[a-zA-Z0-9]+$';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private nextInput = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n    const regex = new RegExp(this.pattern);\n\n    if (!regex.test(input.value)) {\n      input.value = '';\n    }\n\n    if (input.value !== '') {\n      if (input.nextSibling) {\n        (input.nextSibling as HTMLElement)?.focus();\n      } else {\n        input.blur();\n      }\n    }\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private prevInput = (e: KeyboardEvent) => {\n    if (e.key === 'Backspace') {\n      const { value } = e.currentTarget as HTMLInputElement;\n      const input = e.target as HTMLInputElement;\n\n      if (input.previousSibling && value === '') {\n        (input.previousSibling as HTMLElement)?.focus();\n      } else {\n        input.blur();\n        input.focus();\n      }\n    }\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private focusInput = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n    input.value = '';\n    this.mChange.emit('');\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private wheelInput = (e: Event) => {\n    const input = e.target as HTMLInputElement;\n    // prevent change the value with the scroll\n    input.blur();\n  };\n\n  private formChange = (e: Event) => {\n    const form = e.currentTarget as HTMLFormElement;\n    const formData = new FormData(form);\n    const values = Array.from(formData.values()).join('');\n    this.mChange.emit(values);\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private preventDefaultEvents = (e: Event) => {\n    e.preventDefault();\n  };\n\n  connectedCallback() {\n    this.pattern = this.type === 'number' ? '[0-9]+' : '^[a-zA-Z0-9]+$';\n  }\n\n  render() {\n    return (\n      <div class=\"m-input-pin\">\n        {this.label && (\n          <label htmlFor=\"pinIndex0\">\n            {this.label}\n            {this.labelIcon && (\n              <m-icon\n                class=\"m-input-pin-icon\"\n                icon={this.labelIcon}\n                size={`var(--${PREFIX_BS}m-input-label-font-size)`}\n                familyClass={this.labelIconFamilyClass}\n                familyPrefix={this.labelIconFamilyPrefix}\n              />\n            )}\n          </label>\n        )}\n        <form\n          id={this.mId}\n          class=\"m-input-pin-controls\"\n          onInput={this.formChange}\n          onSubmit={this.preventDefaultEvents}\n        >\n          {Array.from({ length: this.characters }).map((_, index) => (\n            <input\n              class={{\n                'form-control': true,\n                'is-invalid': this.isInvalid,\n                'is-valid': this.isValid,\n              }}\n              type={this.isSecret ? 'password' : this.type}\n              aria-describedby={`${this.mId}State`}\n              inputMode={this.mInputMode}\n              id={`pinIndex${index}`}\n              name={`pin-${index}`}\n              maxLength={1}\n              onInput={this.nextInput}\n              onKeyDown={this.prevInput}\n              onFocus={this.focusInput}\n              onWheel={this.wheelInput}\n              onClick={this.preventDefaultEvents}\n              autocomplete=\"off\"\n              placeholder={this.placeholder}\n              disabled={this.isDisabled || this.isLoading}\n              required\n              {...this.type === 'number' && (\n                {\n                  min: 0,\n                  max: 9,\n                }\n              )}\n            />\n          ))}\n          {((this.isInvalid || this.isValid) && !this.isLoading) && (\n            <span\n              class=\"input-group-text\"\n              id={`${this.mId}State`}\n            >\n              <m-icon\n                class=\"m-input-pin-validation-icon\"\n                icon={this.isInvalid ? 'exclamation-circle' : 'check'}\n                familyClass={this.iconFamilyClass}\n                familyPrefix={this.iconFamilyPrefix}\n              />\n            </span>\n          )}\n          {this.isLoading && (\n            <div class=\"input-group-text m-input-pin-icon\">\n              <span\n                class=\"spinner-border spinner-border-sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              >\n                <span class=\"visually-hidden\">Loading...</span>\n              </span>\n            </div>\n          )}\n        </form>\n        {this.hint && (\n          <div\n            class=\"form-text\"\n            id={`${this.mId}Hint`}\n          >\n            {this.hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"}