{"version":3,"names":["MInputSelect","this","changeHandler","event","value","target","mChange","emit","options","find","option","valueExtractor","toString","blurHandler","mBlur","iconStartClickHandler","mIconStartClick","iconEndClickHandler","mIconEndClick","item","label","render","h","class","htmlFor","mId","labelIcon","icon","size","PREFIX_BS","familyClass","labelIconFamilyClass","familyPrefix","labelIconFamilyPrefix","disabled","isDisabled","isLoading","iconStart","type","id","onClick","iconStartFamilyClass","iconStartFamilyPrefix","name","onChange","onBlur","map","selected","selectedOption","labelExtractor","iconEnd","iconEndFamilyClass","iconEndFamilyPrefix","role","hint"],"sources":["./src/components/m-input-select/m-input-select.tsx"],"sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  h,\n  Prop,\n  Event,\n} from '@stencil/core';\n\nimport { PREFIX_BS } from '../../utils';\n\n@Component({ tag: 'm-input-select' })\nexport class MInputSelect implements ComponentInterface {\n  /**\n   * The id of the input\n   */\n  @Prop() mId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n   * The label text\n   */\n  @Prop() label = '';\n\n  /**\n   * The select options\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Prop() options: Array<Record<string, unknown>> = [];\n\n  /**\n   * Icon for the label text\n   */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family prefix\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n   * Flag to disable the input\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag for loading state.\n   */\n  @Prop() isLoading = false;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyPrefix?: string;\n\n  /**\n   * The start icon for the select\n   */\n  @Prop() iconStart?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyClass?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyPrefix?: string;\n\n  /**\n   * The end icon for the select\n   */\n  @Prop() iconEnd?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyPrefix?: string;\n\n  /**\n   * Hint to display\n   */\n  @Prop() hint?: string;\n\n  /**\n   * The value selected of the component\n   */\n  @Prop() selectedOption?: Record<string, unknown>;\n\n  /**\n   * Callback to extract the value from the option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any,class-methods-use-this\n  @Prop() valueExtractor: (item: any) => string | number = (item) => item?.value;\n\n  /**\n   * Callback to extract the label from the option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any,class-methods-use-this\n  @Prop() labelExtractor: (item: any) => string = (item) => item?.label;\n\n  /**\n   * Emitted when the select value has changed\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Event({ eventName: 'mChange' }) mChange!: EventEmitter;\n\n  /**\n   * Emitted when blur the input\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Event({ eventName: 'mBlur' }) mBlur!: EventEmitter;\n\n  /**\n   * Emitted when click on the left icon\n   */\n  @Event({ eventName: 'mIconStartClick' }) mIconStartClick!: EventEmitter<MouseEvent>;\n\n  /**\n   * Emitted when click on the right icon\n   */\n  @Event({ eventName: 'mIconEndClick' }) mIconEndClick!: EventEmitter<MouseEvent>;\n\n  private changeHandler = (event: Event) => {\n    const { value } = event.target as HTMLSelectElement;\n    this.mChange.emit(\n      this.options.find((option) => this.valueExtractor(option).toString() === value),\n    );\n  };\n\n  private blurHandler = (event: Event) => {\n    this.mBlur.emit(event);\n  };\n\n  private iconStartClickHandler = (event: MouseEvent) => {\n    this.mIconStartClick.emit(event);\n  };\n\n  private iconEndClickHandler = (event: MouseEvent) => {\n    this.mIconEndClick.emit(event);\n  };\n\n  render() {\n    return (\n      <div class=\"m-input\">\n        {(this.label) && (\n          <label htmlFor={this.mId}>\n            {this.label}\n            {this.labelIcon && (\n              <m-icon\n                class=\"m-input-icon\"\n                icon={this.labelIcon}\n                size={`var(--${PREFIX_BS}m-input-label-font-size)`}\n                familyClass={this.labelIconFamilyClass}\n                familyPrefix={this.labelIconFamilyPrefix}\n              />\n            )}\n          </label>\n        )}\n        <div class=\"m-input-control\">\n          <div\n            class={{\n              'input-group': true,\n              disabled: this.isDisabled || this.isLoading,\n            }}\n          >\n            {this.iconStart && (\n              <button\n                type=\"button\"\n                class=\"input-group-text\"\n                id={`${this.mId}Start`}\n                onClick={this.iconStartClickHandler}\n                disabled={this.isDisabled || this.isLoading}\n              >\n                {this.iconStart && (\n                  <m-icon\n                    class=\"m-input-icon\"\n                    icon={this.iconStart}\n                    familyClass={this.iconStartFamilyClass}\n                    familyPrefix={this.iconStartFamilyPrefix}\n                  />\n                )}\n              </button>\n            )}\n            <select\n              id={this.mId}\n              name={this.name}\n              class={{ 'form-select': true }}\n              aria-label={this.label}\n              disabled={this.isDisabled || this.isLoading}\n              aria-describedby={`${this.mId}Add ${this.mId}Hint`}\n              onChange={this.changeHandler}\n              onBlur={this.blurHandler}\n            >\n              {this.options.map((option) => (\n                <option\n                  value={this.valueExtractor(option)}\n                  selected={\n                    this.selectedOption\n                      && this.valueExtractor(option) === this.valueExtractor(this.selectedOption)\n                  }\n                >\n                  {this.labelExtractor(option)}\n                </option>\n              ))}\n            </select>\n            {(this.iconEnd && !this.isLoading) && (\n              <button\n                type=\"button\"\n                class=\"input-group-text\"\n                id={`${this.mId}End`}\n                onClick={this.iconEndClickHandler}\n                disabled={this.isDisabled || this.isLoading}\n              >\n                {this.iconEnd && (\n                  <m-icon\n                    class=\"m-input-icon\"\n                    icon={this.iconEnd}\n                    familyClass={this.iconEndFamilyClass}\n                    familyPrefix={this.iconEndFamilyPrefix}\n                  />\n                )}\n              </button>\n            )}\n            {this.isLoading && (\n              <div class=\"input-group-text form-control-icon loading\">\n                <span\n                  class=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                >\n                  <span class=\"visually-hidden\">Loading...</span>\n                </span>\n              </div>\n            )}\n          </div>\n          {this.hint && (\n            <div\n              class=\"form-text\"\n              id={`${this.mId}Hint`}\n            >\n              {this.hint}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"oHAWaA,EAAY,M,qLAmIfC,KAAAC,cAAiBC,IACvB,MAAMC,MAAEA,GAAUD,EAAME,OACxBJ,KAAKK,QAAQC,KACXN,KAAKO,QAAQC,MAAMC,GAAWT,KAAKU,eAAeD,GAAQE,aAAeR,IAC1E,EAGKH,KAAAY,YAAeV,IACrBF,KAAKa,MAAMP,KAAKJ,EAAM,EAGhBF,KAAAc,sBAAyBZ,IAC/BF,KAAKe,gBAAgBT,KAAKJ,EAAM,EAG1BF,KAAAgB,oBAAuBd,IAC7BF,KAAKiB,cAAcX,KAAKJ,EAAM,E,kDArIhB,G,aAMkC,G,kHAoB7B,M,eAKD,M,mUAwDsCgB,GAASA,IAAI,MAAJA,SAAI,SAAJA,EAAMf,M,oBAMxBe,GAASA,IAAI,MAAJA,SAAI,SAAJA,EAAMC,K,CA2ChEC,SACE,OACEC,EAAA,OAAKC,MAAM,WACPtB,KAAU,OACVqB,EAAA,SAAOE,QAASvB,KAAKwB,KAClBxB,KAAKmB,MACLnB,KAAKyB,WACJJ,EAAA,UACEC,MAAM,eACNI,KAAM1B,KAAKyB,UACXE,KAAM,SAASC,4BACfC,YAAa7B,KAAK8B,qBAClBC,aAAc/B,KAAKgC,yBAK3BX,EAAA,OAAKC,MAAM,mBACTD,EAAA,OACEC,MAAO,CACL,cAAe,KACfW,SAAUjC,KAAKkC,YAAclC,KAAKmC,YAGnCnC,KAAKoC,WACJf,EAAA,UACEgB,KAAK,SACLf,MAAM,mBACNgB,GAAI,GAAGtC,KAAKwB,WACZe,QAASvC,KAAKc,sBACdmB,SAAUjC,KAAKkC,YAAclC,KAAKmC,WAEjCnC,KAAKoC,WACJf,EAAA,UACEC,MAAM,eACNI,KAAM1B,KAAKoC,UACXP,YAAa7B,KAAKwC,qBAClBT,aAAc/B,KAAKyC,yBAK3BpB,EAAA,UACEiB,GAAItC,KAAKwB,IACTkB,KAAM1C,KAAK0C,KACXpB,MAAO,CAAE,cAAe,MAAM,aAClBtB,KAAKmB,MACjBc,SAAUjC,KAAKkC,YAAclC,KAAKmC,UAAS,mBACzB,GAAGnC,KAAKwB,UAAUxB,KAAKwB,UACzCmB,SAAU3C,KAAKC,cACf2C,OAAQ5C,KAAKY,aAEZZ,KAAKO,QAAQsC,KAAKpC,GACjBY,EAAA,UACElB,MAAOH,KAAKU,eAAeD,GAC3BqC,SACE9C,KAAK+C,gBACA/C,KAAKU,eAAeD,KAAYT,KAAKU,eAAeV,KAAK+C,iBAG/D/C,KAAKgD,eAAevC,OAIzBT,KAAKiD,UAAYjD,KAAKmC,WACtBd,EAAA,UACEgB,KAAK,SACLf,MAAM,mBACNgB,GAAI,GAAGtC,KAAKwB,SACZe,QAASvC,KAAKgB,oBACdiB,SAAUjC,KAAKkC,YAAclC,KAAKmC,WAEjCnC,KAAKiD,SACJ5B,EAAA,UACEC,MAAM,eACNI,KAAM1B,KAAKiD,QACXpB,YAAa7B,KAAKkD,mBAClBnB,aAAc/B,KAAKmD,uBAK1BnD,KAAKmC,WACJd,EAAA,OAAKC,MAAM,8CACTD,EAAA,QACEC,MAAM,mCACN8B,KAAK,SAAQ,cACD,QAEZ/B,EAAA,QAAMC,MAAM,mBAAiB,iBAKpCtB,KAAKqD,MACJhC,EAAA,OACEC,MAAM,YACNgB,GAAI,GAAGtC,KAAKwB,WAEXxB,KAAKqD,O"}