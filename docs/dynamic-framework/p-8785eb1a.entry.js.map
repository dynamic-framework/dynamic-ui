{"version":3,"names":["DInputPassword","this","changeHandler","eventChange","emit","_a","htmlInput","value","toString","visibilityHandler","visible","render","h","ref","el","innerId","name","label","labelIcon","labelIconFamilyClass","labelIconFamilyPrefix","placeholder","iconEnd","type","isDisabled","isReadOnly","isLoading","hint","isInvalid","isValid","onEventChange","onEventIconEndClick"],"sources":["./src/components/d-input-password/d-input-password.tsx"],"sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  Event,\n  h,\n  Prop, State,\n} from '@stencil/core';\n\n@Component({ tag: 'd-input-password' })\nexport class DInputPassword implements ComponentInterface {\n  /**\n   * The id of the input\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n    * The label text\n    */\n  @Prop() label = '';\n\n  /**\n    * Icon to display on label right\n    */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n    * The placeholder text\n    */\n  @Prop() placeholder = '';\n\n  /**\n    * The value of the input\n    */\n  @Prop() value = '';\n\n  /**\n    * Flag to disable the input\n    */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n  */\n  @Prop() isLoading = false;\n\n  /**\n    * Hint to display, also used to display validity feedback\n    */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * Emitted when the input value has changed\n   */\n  @Event() eventChange!: EventEmitter<string>;\n\n  /**\n   * State to show the icon in valid states\n   */\n  @State() visible = false;\n\n  /**\n   * HTML input element\n   */\n  private htmlInput?: HTMLDInputElement;\n\n  private changeHandler = () => {\n    this.eventChange.emit(this.htmlInput?.value.toString());\n  };\n\n  private visibilityHandler = () => {\n    this.visible = !this.visible;\n  };\n\n  render() {\n    return (\n      <d-input\n        // eslint-disable-next-line no-return-assign\n        ref={(el) => (this.htmlInput = el as HTMLDInputElement)}\n        innerId={this.innerId}\n        name={this.name}\n        label={this.label}\n        labelIcon={this.labelIcon}\n        labelIconFamilyClass={this.labelIconFamilyClass}\n        labelIconFamilyPrefix={this.labelIconFamilyPrefix}\n        placeholder={this.placeholder}\n        value={this.value}\n        iconEnd={!this.visible ? 'eye-slash' : 'eye'}\n        type={!this.visible ? 'password' : 'text'}\n        isDisabled={this.isDisabled}\n        isReadOnly={this.isReadOnly}\n        isLoading={this.isLoading}\n        hint={this.hint}\n        isInvalid={this.isInvalid}\n        isValid={this.isValid}\n        onEventChange={this.changeHandler}\n        onEventIconEndClick={this.visibilityHandler}\n      />\n    );\n  }\n}\n"],"mappings":"wDASaA,EAAc,M,kEAsFjBC,KAAAC,cAAgB,K,MACtBD,KAAKE,YAAYC,MAAKC,EAAAJ,KAAKK,aAAS,MAAAD,SAAA,SAAAA,EAAEE,MAAMC,WAAW,EAGjDP,KAAAQ,kBAAoB,KAC1BR,KAAKS,SAAWT,KAAKS,OAAO,E,sDA7Ed,G,mHAoBM,G,WAKN,G,gBAKK,M,gBAKA,M,eAKD,M,mCAUA,M,aAKF,M,aAUC,K,CAenBC,SACE,OACEC,EAAA,WAEEC,IAAMC,GAAQb,KAAKK,UAAYQ,EAC/BC,QAASd,KAAKc,QACdC,KAAMf,KAAKe,KACXC,MAAOhB,KAAKgB,MACZC,UAAWjB,KAAKiB,UAChBC,qBAAsBlB,KAAKkB,qBAC3BC,sBAAuBnB,KAAKmB,sBAC5BC,YAAapB,KAAKoB,YAClBd,MAAON,KAAKM,MACZe,SAAUrB,KAAKS,QAAU,YAAc,MACvCa,MAAOtB,KAAKS,QAAU,WAAa,OACnCc,WAAYvB,KAAKuB,WACjBC,WAAYxB,KAAKwB,WACjBC,UAAWzB,KAAKyB,UAChBC,KAAM1B,KAAK0B,KACXC,UAAW3B,KAAK2B,UAChBC,QAAS5B,KAAK4B,QACdC,cAAe7B,KAAKC,cACpB6B,oBAAqB9B,KAAKQ,mB"}