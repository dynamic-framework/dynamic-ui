{"version":3,"names":["DInput","this","changeHandler","event","eventChange","emit","target","value","blurHandler","eventBlur","focusHandler","eventFocus","wheelHandler","eventWheel","iconStartClickHandler","eventIconStartClick","iconEndClickHandler","eventIconEndClick","async","_a","htmlInputElement","focus","blur","componentWillLoad","inputStart","el","querySelector","inputEnd","render","h","class","label","htmlFor","innerId","labelIcon","icon","size","PREFIX_BS","familyClass","labelIconFamilyClass","familyPrefix","labelIconFamilyPrefix","isInvalid","disabled","isDisabled","isLoading","name","iconStart","type","id","onClick","iconStartFamilyClass","iconStartFamilyPrefix","ref","isValid","placeholder","readOnly","isReadOnly","inputmode","innerInputMode","pattern","onInput","onBlur","onFocus","onWheel","iconEnd","iconFamilyClass","iconFamilyPrefix","iconEndFamilyClass","iconEndFamilyPrefix","role","hint"],"sources":["./src/components/d-input/d-input.tsx"],"sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  h,\n  Prop,\n  Event,\n  Method,\n  Element,\n} from '@stencil/core';\n\nimport { PREFIX_BS } from '../../utils';\n\n@Component({ tag: 'd-input' })\nexport class DInput implements ComponentInterface {\n  @Element() el!: HTMLDInputElement;\n  /**\n   * The id of the input\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n   * The label text\n   */\n  @Prop() label = '';\n\n  /**\n   * Icon for the label text\n   */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family prefix\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n   * The placeholder text\n   */\n  @Prop() placeholder = '';\n\n  /**\n   * The type of the input\n   */\n  @Prop() type = 'text';\n\n  /**\n   * The value of the input\n   */\n  @Prop() value: string | number = '';\n\n  /**\n   * Input mode\n   */\n  @Prop() innerInputMode?: string;\n\n  /**\n   * Pattern to validate\n   */\n  @Prop() pattern?: string;\n\n  /**\n   * Flag to disable the input\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n  */\n  @Prop() isLoading = false;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyPrefix?: string;\n\n  /**\n   * Icon to display on input left\n   */\n  @Prop() iconStart?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyClass?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyPrefix?: string;\n\n  /**\n   * Icon to display on input right\n   */\n  @Prop() iconEnd?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyPrefix?: string;\n\n  /**\n   * Hint to display\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * Set focus to internal input\n   */\n  @Method()\n  async innerFocus() {\n    this.htmlInputElement?.focus();\n  }\n\n  /**\n   * Set blur to internal input\n   */\n  @Method()\n  async innerBlur() {\n    this.htmlInputElement?.blur();\n  }\n\n  /**\n   * Emitted when the input value has changed\n   */\n  @Event() eventChange!: EventEmitter<string | number>;\n\n  /**\n   * Emitted when blur the input\n   */\n  @Event() eventBlur!: EventEmitter;\n\n  /**\n   * Emitted when blur the input\n   */\n  @Event() eventFocus!: EventEmitter;\n\n  /**\n   * Emitted when blur the input\n   */\n  @Event() eventWheel!: EventEmitter;\n\n  /**\n   * Emitted when click on the left icon\n   */\n  @Event() eventIconStartClick!: EventEmitter<MouseEvent>;\n\n  /**\n   * Emitted when click on the right icon\n   */\n  @Event() eventIconEndClick!: EventEmitter<MouseEvent>;\n\n  /**\n   * HTML d-input element\n   */\n  private htmlInputElement?: HTMLInputElement;\n\n  private changeHandler = (event: Event) => {\n    this.eventChange.emit((event.target as HTMLInputElement).value);\n  };\n\n  private blurHandler = (event: Event) => {\n    this.eventBlur.emit(event);\n  };\n\n  private focusHandler = (event: Event) => {\n    this.eventFocus.emit(event);\n  };\n\n  private wheelHandler = (event: Event) => {\n    this.eventWheel.emit(event);\n  };\n\n  private iconStartClickHandler = (event: MouseEvent) => {\n    this.eventIconStartClick.emit(event);\n  };\n\n  private iconEndClickHandler = (event: MouseEvent) => {\n    this.eventIconEndClick.emit(event);\n  };\n\n  private inputStart!: HTMLElement | null;\n  private inputEnd!: HTMLElement | null;\n\n  componentWillLoad() {\n    this.inputStart = this.el.querySelector('[slot=\"input-start\"]');\n    this.inputEnd = this.el.querySelector('[slot=\"input-end\"]');\n  }\n\n  render() {\n    return (\n      <div class=\"d-input\">\n        {this.label && (\n          <label htmlFor={this.innerId}>\n            {this.label}\n            {this.labelIcon && (\n              <d-icon\n                class=\"d-input-icon\"\n                icon={this.labelIcon}\n                size={`var(--${PREFIX_BS}input-label-font-size)`}\n                familyClass={this.labelIconFamilyClass}\n                familyPrefix={this.labelIconFamilyPrefix}\n              />\n            )}\n          </label>\n        )}\n        <div class=\"d-input-control\">\n          <div\n            class={{\n              'input-group': true,\n              'has-validation': this.isInvalid,\n              disabled: this.isDisabled || this.isLoading,\n            }}\n          >\n            {!!this.inputStart && (\n              <div class=\"input-group-text\">\n                <slot name=\"input-start\" />\n              </div>\n            )}\n            {this.iconStart && (\n              <button\n                type=\"button\"\n                class=\"input-group-text\"\n                id={`${this.innerId}Start`}\n                onClick={this.iconStartClickHandler}\n                disabled={this.isDisabled || this.isLoading}\n              >\n                {this.iconStart && (\n                  <d-icon\n                    class=\"d-input-icon\"\n                    icon={this.iconStart}\n                    familyClass={this.iconStartFamilyClass}\n                    familyPrefix={this.iconStartFamilyPrefix}\n                  />\n                )}\n              </button>\n            )}\n            <input\n              // eslint-disable-next-line no-return-assign\n              ref={(el) => (this.htmlInputElement = el)}\n              id={this.innerId}\n              name={this.name}\n              type={this.type}\n              class={{\n                'form-control': true,\n                'is-invalid': this.isInvalid,\n                'is-valid': this.isValid,\n              }}\n              placeholder={this.placeholder}\n              aria-label={this.label}\n              disabled={this.isDisabled || this.isLoading}\n              readOnly={this.isReadOnly}\n              value={this.value}\n              aria-describedby={`${this.innerId}Add ${this.innerId}Hint`}\n              inputmode={this.innerInputMode}\n              pattern={this.pattern}\n              onInput={this.changeHandler}\n              onBlur={this.blurHandler}\n              onFocus={this.focusHandler}\n              onWheel={this.wheelHandler}\n            />\n            {((this.isInvalid || this.isValid) && !this.iconEnd && !this.isLoading) && (\n              <span\n                class=\"input-group-text\"\n                id={`${this.innerId}State`}\n              >\n                <d-icon\n                  class=\"d-input-validation-icon\"\n                  icon={this.isInvalid ? 'exclamation-circle' : 'check'}\n                  familyClass={this.iconFamilyClass}\n                  familyPrefix={this.iconFamilyPrefix}\n                />\n              </span>\n            )}\n            {(this.iconEnd && !this.isLoading) && (\n              <button\n                type=\"button\"\n                class=\"input-group-text\"\n                id={`${this.innerId}End`}\n                onClick={this.iconEndClickHandler}\n                disabled={this.isDisabled || this.isLoading}\n              >\n                {this.iconEnd && (\n                  <d-icon\n                    class=\"d-input-icon\"\n                    icon={this.iconEnd}\n                    familyClass={this.iconEndFamilyClass}\n                    familyPrefix={this.iconEndFamilyPrefix}\n                  />\n                )}\n              </button>\n            )}\n            {!!this.inputEnd && (\n              <div class=\"input-group-text\">\n                <slot name=\"input-end\" />\n              </div>\n            )}\n            {this.isLoading && (\n              <div class=\"input-group-text d-input-icon\">\n                <span\n                  class=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                >\n                  <span class=\"visually-hidden\">Loading...</span>\n                </span>\n              </div>\n            )}\n          </div>\n          {this.hint && (\n            <div\n              class=\"form-text\"\n              id={`${this.innerId}Hint`}\n            >\n              {this.hint}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"}