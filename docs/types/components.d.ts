/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AlertType } from "./components/d-alert/d-alert-interface";
import { ComponentSize, InputState } from "./utils/component-interface";
import { ButtonType, ButtonVariant } from "./components/d-button/d-button-interface";
import { FormCheckType } from "./components/d-input-check/d-input-check-interface";
import { Options } from "currency.js";
import { PinInputMode, PinInputType } from "./components/d-input-pin/d-input-pin-interface";
import { FullScreenFrom, ModalSize } from "./components/d-modal/d-modal-interface";
import { PositionToggleFrom } from "./components/d-offcanvas/d-offcanvas-interface";
export { AlertType } from "./components/d-alert/d-alert-interface";
export { ComponentSize, InputState } from "./utils/component-interface";
export { ButtonType, ButtonVariant } from "./components/d-button/d-button-interface";
export { FormCheckType } from "./components/d-input-check/d-input-check-interface";
export { Options } from "currency.js";
export { PinInputMode, PinInputType } from "./components/d-input-pin/d-input-pin-interface";
export { FullScreenFrom, ModalSize } from "./components/d-modal/d-modal-interface";
export { PositionToggleFrom } from "./components/d-offcanvas/d-offcanvas-interface";
export namespace Components {
    interface DAlert {
        /**
          * Alert icon
         */
        "icon"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Show close button
         */
        "showClose"?: boolean;
        /**
          * Show alert icon
         */
        "showIcon": boolean;
        /**
          * Alert type
         */
        "type": AlertType;
    }
    interface DBadge {
        /**
          * Enable dot mode
         */
        "isDot": boolean;
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme": string;
    }
    interface DButton {
        /**
          * Icon right to display
         */
        "iconEnd"?: string;
        /**
          * Icon right family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Icon right family prefix
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon left to display
         */
        "iconStart"?: string;
        /**
          * Icon left family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Icon left family prefix
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the button, alias to state="disable"
         */
        "isDisabled": boolean;
        /**
          * Flag to loading state and disable button.
         */
        "isLoading": boolean;
        /**
          * Flag to switch to pill button border radius.
         */
        "isPill": boolean;
        /**
          * Flag to start or stop event propagation
         */
        "isStopPropagationEnabled": boolean;
        /**
          * The size
         */
        "size"?: ComponentSize;
        /**
          * Change the state of the button
         */
        "state"?: InputState;
        /**
          * The text to display.
         */
        "text": string;
        /**
          * Theme to use.
         */
        "theme": string;
        /**
          * The html type of the button.
         */
        "type": ButtonType;
        /**
          * The html value of the button.
         */
        "value"?: string;
        /**
          * The variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface DChip {
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "iconFamilyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "iconFamilyPrefix"?: string;
        /**
          * Show close icon
         */
        "showClose"?: boolean;
        /**
          * The text of chip
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme": string;
    }
    interface DIcon {
        /**
          * Icon background color in css color unit or var
         */
        "backgroundColor"?: string;
        /**
          * Circle size in css length unit
         */
        "circleSize"?: string;
        /**
          * Icon color in css color unit or var
         */
        "color"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "familyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "familyPrefix"?: string;
        /**
          * Add circle around the icon
         */
        "hasCircle": boolean;
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon": string;
        /**
          * Icon class
         */
        "innerClass"?: string;
        /**
          * Enable loading animation
         */
        "isLoading": boolean;
        /**
          * Loading animation duration, in seconds
         */
        "loadingDuration": number;
        /**
          * Size of the icon in css length unit
         */
        "size"?: string;
        /**
          * Theme of the icon
         */
        "theme"?: string;
    }
    interface DInput {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon to display on input right
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon to display on input left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Set blur to internal input
         */
        "innerBlur": () => Promise<void>;
        /**
          * Set focus to internal input
         */
        "innerFocus": () => Promise<void>;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Input mode
         */
        "innerInputMode"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Pattern to validate
         */
        "pattern"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The type of the input
         */
        "type": string;
        /**
          * The value of the input
         */
        "value": string | number;
    }
    interface DInputCheck {
        /**
          * Form control identifier
         */
        "innerId": string;
        /**
          * Set checkbox or radio button marked as selected or not
         */
        "isChecked": boolean;
        /**
          * Set input as disabled
         */
        "isDisabled": boolean;
        /**
          * Set view of checkbox as indeterminated
         */
        "isIndeterminate"?: boolean;
        /**
          * Text that will be displayed beside Check input or Radio input
         */
        "label"?: string;
        /**
          * HTML Name to use within a form or JS reference
         */
        "name"?: string;
        /**
          * Set whether is a checkbox input or a radio input
         */
        "type": FormCheckType;
        /**
          * A string representing the value of the checkbox or radio
         */
        "value"?: string;
    }
    interface DInputCounter {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd": string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart": string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * The input is disabled
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * * The max value of the input
         */
        "maxValue": number;
        /**
          * * The min value of the input
         */
        "minValue": number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The value of the input
         */
        "value": number;
    }
    interface DInputCurrencyBase {
        /**
          * Currency code
         */
        "currencyCode"?: string;
        /**
          * Options for the d-input-currency-base
         */
        "currencyOptions": Options;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * The input is disabled
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * * The max value of the input
         */
        "maxValue"?: number;
        /**
          * * The min value of the input
         */
        "minValue"?: number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Placeholder for the input
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: number;
    }
    interface DInputPassword {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface DInputPin {
        /**
          * Number of characters of the pin
         */
        "characters": number;
        /**
          * Hint for the input
         */
        "hint"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Id for the input
         */
        "innerId": string;
        /**
          * Keyboard style
         */
        "innerInputMode": PinInputMode;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Hide the characters
         */
        "isSecret": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Placeholder of the inputs
         */
        "placeholder"?: string;
        /**
          * Type of the inputs
         */
        "type": PinInputType;
    }
    interface DInputSearch {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface DInputSelect {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * The end icon for the select
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * The start icon for the select
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Callback to extract the label from the option
         */
        "labelExtractor": (item: any) => string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The select options
         */
        "options": Array<Record<string, unknown>>;
        /**
          * The value selected of the component
         */
        "selectedOption"?: Record<string, unknown>;
        /**
          * Callback to extract the value from the option
         */
        "valueExtractor": (item: any) => string | number;
    }
    interface DInputSwitch {
        /**
          * Id
         */
        "innerId": string;
        /**
          * Flag to change the check state
         */
        "isChecked"?: boolean;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Flag to disable the onMChange event
         */
        "isReadonly"?: boolean;
        /**
          * The text to display in the switch.
         */
        "label"?: string;
        /**
          * Id
         */
        "name"?: string;
    }
    interface DModal {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill' | 'center';
        /**
          * Minimum size to apply the fullscreen
         */
        "fullScreenFrom"?: FullScreenFrom;
        /**
          * Is modal centered
         */
        "isCentered"?: boolean;
        /**
          * Is fullscreen in all sizes
         */
        "isFullScreen"?: boolean;
        /**
          * Is modal scrollable
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * Modal size
         */
        "modalSize"?: ModalSize;
        /**
          * the name of the modal
         */
        "name": string;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface DOffcanvas {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill';
        /**
          * Is body scrollable while offcanvas is active
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * the name of the offcanvas
         */
        "name": string;
        /**
          * Position to show offcanvas from
         */
        "openFrom"?: PositionToggleFrom;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface DProgress {
        /**
          * Current progress value
         */
        "currentValue": number;
        /**
          * Enable striped animation
         */
        "enableStripedAnimation": boolean;
        /**
          * Hide current value
         */
        "hideCurrentValue"?: boolean | undefined;
        /**
          * Maximum value of the bar
         */
        "maxValue": number;
        /**
          * Minimum value of the bar
         */
        "minValue": number;
    }
    interface DQuickActionButton {
        /**
          * The icon to indicate the action
         */
        "actionIcon"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyPrefix"?: string;
        /**
          * Action link text, displayed when the icon is not set
         */
        "actionLinkText"?: string;
        /**
          * Action link theme
         */
        "actionLinkTheme": string;
        /**
          * The title
         */
        "line1": string;
        /**
          * The subtitle
         */
        "line2": string;
        /**
          * Representative icon, displayed when the representativeImage is not set
         */
        "representativeIcon"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyPrefix"?: string;
        /**
          * Representative icon circle
         */
        "representativeIconHasCircle"?: boolean | undefined;
        /**
          * Representative icon theme
         */
        "representativeIconTheme": string;
        /**
          * Representative image
         */
        "representativeImage"?: string;
        /**
          * Second action icon
         */
        "secondaryActionIcon"?: string;
    }
    interface DQuickActionCheck {
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Is selected
         */
        "isChecked"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * Line 3 text
         */
        "line3": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Input value
         */
        "value": string;
    }
    interface DQuickActionSelect {
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Is selected
         */
        "isSelected"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Input value
         */
        "value": string;
    }
    interface DQuickActionSwitch {
        /**
          * Hint to display
         */
        "hint": string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Is disabled
         */
        "isDisabled"?: boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * The name of the input
         */
        "name"?: string;
    }
}
export interface DAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDAlertElement;
}
export interface DButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDButtonElement;
}
export interface DChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDChipElement;
}
export interface DInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputElement;
}
export interface DInputCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputCheckElement;
}
export interface DInputCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputCounterElement;
}
export interface DInputCurrencyBaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputCurrencyBaseElement;
}
export interface DInputPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputPasswordElement;
}
export interface DInputPinCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputPinElement;
}
export interface DInputSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputSearchElement;
}
export interface DInputSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputSelectElement;
}
export interface DInputSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDInputSwitchElement;
}
export interface DModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDModalElement;
}
export interface DOffcanvasCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDOffcanvasElement;
}
export interface DQuickActionButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDQuickActionButtonElement;
}
export interface DQuickActionCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDQuickActionCheckElement;
}
export interface DQuickActionSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDQuickActionSelectElement;
}
export interface DQuickActionSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDQuickActionSwitchElement;
}
declare global {
    interface HTMLDAlertElement extends Components.DAlert, HTMLStencilElement {
    }
    var HTMLDAlertElement: {
        prototype: HTMLDAlertElement;
        new (): HTMLDAlertElement;
    };
    interface HTMLDBadgeElement extends Components.DBadge, HTMLStencilElement {
    }
    var HTMLDBadgeElement: {
        prototype: HTMLDBadgeElement;
        new (): HTMLDBadgeElement;
    };
    interface HTMLDButtonElement extends Components.DButton, HTMLStencilElement {
    }
    var HTMLDButtonElement: {
        prototype: HTMLDButtonElement;
        new (): HTMLDButtonElement;
    };
    interface HTMLDChipElement extends Components.DChip, HTMLStencilElement {
    }
    var HTMLDChipElement: {
        prototype: HTMLDChipElement;
        new (): HTMLDChipElement;
    };
    interface HTMLDIconElement extends Components.DIcon, HTMLStencilElement {
    }
    var HTMLDIconElement: {
        prototype: HTMLDIconElement;
        new (): HTMLDIconElement;
    };
    interface HTMLDInputElement extends Components.DInput, HTMLStencilElement {
    }
    var HTMLDInputElement: {
        prototype: HTMLDInputElement;
        new (): HTMLDInputElement;
    };
    interface HTMLDInputCheckElement extends Components.DInputCheck, HTMLStencilElement {
    }
    var HTMLDInputCheckElement: {
        prototype: HTMLDInputCheckElement;
        new (): HTMLDInputCheckElement;
    };
    interface HTMLDInputCounterElement extends Components.DInputCounter, HTMLStencilElement {
    }
    var HTMLDInputCounterElement: {
        prototype: HTMLDInputCounterElement;
        new (): HTMLDInputCounterElement;
    };
    interface HTMLDInputCurrencyBaseElement extends Components.DInputCurrencyBase, HTMLStencilElement {
    }
    var HTMLDInputCurrencyBaseElement: {
        prototype: HTMLDInputCurrencyBaseElement;
        new (): HTMLDInputCurrencyBaseElement;
    };
    interface HTMLDInputPasswordElement extends Components.DInputPassword, HTMLStencilElement {
    }
    var HTMLDInputPasswordElement: {
        prototype: HTMLDInputPasswordElement;
        new (): HTMLDInputPasswordElement;
    };
    interface HTMLDInputPinElement extends Components.DInputPin, HTMLStencilElement {
    }
    var HTMLDInputPinElement: {
        prototype: HTMLDInputPinElement;
        new (): HTMLDInputPinElement;
    };
    interface HTMLDInputSearchElement extends Components.DInputSearch, HTMLStencilElement {
    }
    var HTMLDInputSearchElement: {
        prototype: HTMLDInputSearchElement;
        new (): HTMLDInputSearchElement;
    };
    interface HTMLDInputSelectElement extends Components.DInputSelect, HTMLStencilElement {
    }
    var HTMLDInputSelectElement: {
        prototype: HTMLDInputSelectElement;
        new (): HTMLDInputSelectElement;
    };
    interface HTMLDInputSwitchElement extends Components.DInputSwitch, HTMLStencilElement {
    }
    var HTMLDInputSwitchElement: {
        prototype: HTMLDInputSwitchElement;
        new (): HTMLDInputSwitchElement;
    };
    interface HTMLDModalElement extends Components.DModal, HTMLStencilElement {
    }
    var HTMLDModalElement: {
        prototype: HTMLDModalElement;
        new (): HTMLDModalElement;
    };
    interface HTMLDOffcanvasElement extends Components.DOffcanvas, HTMLStencilElement {
    }
    var HTMLDOffcanvasElement: {
        prototype: HTMLDOffcanvasElement;
        new (): HTMLDOffcanvasElement;
    };
    interface HTMLDProgressElement extends Components.DProgress, HTMLStencilElement {
    }
    var HTMLDProgressElement: {
        prototype: HTMLDProgressElement;
        new (): HTMLDProgressElement;
    };
    interface HTMLDQuickActionButtonElement extends Components.DQuickActionButton, HTMLStencilElement {
    }
    var HTMLDQuickActionButtonElement: {
        prototype: HTMLDQuickActionButtonElement;
        new (): HTMLDQuickActionButtonElement;
    };
    interface HTMLDQuickActionCheckElement extends Components.DQuickActionCheck, HTMLStencilElement {
    }
    var HTMLDQuickActionCheckElement: {
        prototype: HTMLDQuickActionCheckElement;
        new (): HTMLDQuickActionCheckElement;
    };
    interface HTMLDQuickActionSelectElement extends Components.DQuickActionSelect, HTMLStencilElement {
    }
    var HTMLDQuickActionSelectElement: {
        prototype: HTMLDQuickActionSelectElement;
        new (): HTMLDQuickActionSelectElement;
    };
    interface HTMLDQuickActionSwitchElement extends Components.DQuickActionSwitch, HTMLStencilElement {
    }
    var HTMLDQuickActionSwitchElement: {
        prototype: HTMLDQuickActionSwitchElement;
        new (): HTMLDQuickActionSwitchElement;
    };
    interface HTMLElementTagNameMap {
        "d-alert": HTMLDAlertElement;
        "d-badge": HTMLDBadgeElement;
        "d-button": HTMLDButtonElement;
        "d-chip": HTMLDChipElement;
        "d-icon": HTMLDIconElement;
        "d-input": HTMLDInputElement;
        "d-input-check": HTMLDInputCheckElement;
        "d-input-counter": HTMLDInputCounterElement;
        "d-input-currency-base": HTMLDInputCurrencyBaseElement;
        "d-input-password": HTMLDInputPasswordElement;
        "d-input-pin": HTMLDInputPinElement;
        "d-input-search": HTMLDInputSearchElement;
        "d-input-select": HTMLDInputSelectElement;
        "d-input-switch": HTMLDInputSwitchElement;
        "d-modal": HTMLDModalElement;
        "d-offcanvas": HTMLDOffcanvasElement;
        "d-progress": HTMLDProgressElement;
        "d-quick-action-button": HTMLDQuickActionButtonElement;
        "d-quick-action-check": HTMLDQuickActionCheckElement;
        "d-quick-action-select": HTMLDQuickActionSelectElement;
        "d-quick-action-switch": HTMLDQuickActionSwitchElement;
    }
}
declare namespace LocalJSX {
    interface DAlert {
        /**
          * Alert icon
         */
        "icon"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Emitted when the button has been clicked.
         */
        "onEventClose"?: (event: DAlertCustomEvent<any>) => void;
        /**
          * Show close button
         */
        "showClose"?: boolean;
        /**
          * Show alert icon
         */
        "showIcon"?: boolean;
        /**
          * Alert type
         */
        "type"?: AlertType;
    }
    interface DBadge {
        /**
          * Enable dot mode
         */
        "isDot"?: boolean;
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme"?: string;
    }
    interface DButton {
        /**
          * Icon right to display
         */
        "iconEnd"?: string;
        /**
          * Icon right family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Icon right family prefix
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon left to display
         */
        "iconStart"?: string;
        /**
          * Icon left family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Icon left family prefix
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the button, alias to state="disable"
         */
        "isDisabled"?: boolean;
        /**
          * Flag to loading state and disable button.
         */
        "isLoading"?: boolean;
        /**
          * Flag to switch to pill button border radius.
         */
        "isPill"?: boolean;
        /**
          * Flag to start or stop event propagation
         */
        "isStopPropagationEnabled"?: boolean;
        /**
          * Emitted when the button has been clicked.
         */
        "onEventClick"?: (event: DButtonCustomEvent<any>) => void;
        /**
          * The size
         */
        "size"?: ComponentSize;
        /**
          * Change the state of the button
         */
        "state"?: InputState;
        /**
          * The text to display.
         */
        "text"?: string;
        /**
          * Theme to use.
         */
        "theme"?: string;
        /**
          * The html type of the button.
         */
        "type"?: ButtonType;
        /**
          * The html value of the button.
         */
        "value"?: string;
        /**
          * The variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface DChip {
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "iconFamilyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "iconFamilyPrefix"?: string;
        /**
          * Emitted when the close button has been clicked.
         */
        "onEventClose"?: (event: DChipCustomEvent<any>) => void;
        /**
          * Show close icon
         */
        "showClose"?: boolean;
        /**
          * The text of chip
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme"?: string;
    }
    interface DIcon {
        /**
          * Icon background color in css color unit or var
         */
        "backgroundColor"?: string;
        /**
          * Circle size in css length unit
         */
        "circleSize"?: string;
        /**
          * Icon color in css color unit or var
         */
        "color"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "familyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "familyPrefix"?: string;
        /**
          * Add circle around the icon
         */
        "hasCircle"?: boolean;
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon": string;
        /**
          * Icon class
         */
        "innerClass"?: string;
        /**
          * Enable loading animation
         */
        "isLoading"?: boolean;
        /**
          * Loading animation duration, in seconds
         */
        "loadingDuration"?: number;
        /**
          * Size of the icon in css length unit
         */
        "size"?: string;
        /**
          * Theme of the icon
         */
        "theme"?: string;
    }
    interface DInput {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon to display on input right
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon to display on input left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Input mode
         */
        "innerInputMode"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when blur the input
         */
        "onEventBlur"?: (event: DInputCustomEvent<any>) => void;
        /**
          * Emitted when the input value has changed
         */
        "onEventChange"?: (event: DInputCustomEvent<string | number>) => void;
        /**
          * Emitted when blur the input
         */
        "onEventFocus"?: (event: DInputCustomEvent<any>) => void;
        /**
          * Emitted when click on the right icon
         */
        "onEventIconEndClick"?: (event: DInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when click on the left icon
         */
        "onEventIconStartClick"?: (event: DInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when blur the input
         */
        "onEventWheel"?: (event: DInputCustomEvent<any>) => void;
        /**
          * Pattern to validate
         */
        "pattern"?: string;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The type of the input
         */
        "type"?: string;
        /**
          * The value of the input
         */
        "value"?: string | number;
    }
    interface DInputCheck {
        /**
          * Form control identifier
         */
        "innerId": string;
        /**
          * Set checkbox or radio button marked as selected or not
         */
        "isChecked"?: boolean;
        /**
          * Set input as disabled
         */
        "isDisabled"?: boolean;
        /**
          * Set view of checkbox as indeterminated
         */
        "isIndeterminate"?: boolean;
        /**
          * Text that will be displayed beside Check input or Radio input
         */
        "label"?: string;
        /**
          * HTML Name to use within a form or JS reference
         */
        "name"?: string;
        /**
          * Emitted when the switch has changed
         */
        "onEventChange"?: (event: DInputCheckCustomEvent<any>) => void;
        /**
          * Set whether is a checkbox input or a radio input
         */
        "type": FormCheckType;
        /**
          * A string representing the value of the checkbox or radio
         */
        "value"?: string;
    }
    interface DInputCounter {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * The input is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * * The max value of the input
         */
        "maxValue": number;
        /**
          * * The min value of the input
         */
        "minValue": number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Event for input change
         */
        "onEventChange"?: (event: DInputCounterCustomEvent<number>) => void;
        /**
          * Event for button pressed
         */
        "onEventClick"?: (event: DInputCounterCustomEvent<number>) => void;
        /**
          * The value of the input
         */
        "value": number;
    }
    interface DInputCurrencyBase {
        /**
          * Currency code
         */
        "currencyCode"?: string;
        /**
          * Options for the d-input-currency-base
         */
        "currencyOptions": Options;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * The input is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * * The max value of the input
         */
        "maxValue"?: number;
        /**
          * * The min value of the input
         */
        "minValue"?: number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the inputs bur
         */
        "onEventBlur"?: (event: DInputCurrencyBaseCustomEvent<number>) => void;
        /**
          * Emitted when the inputs change
         */
        "onEventChange"?: (event: DInputCurrencyBaseCustomEvent<number>) => void;
        /**
          * Emitted when the inputs focus
         */
        "onEventFocus"?: (event: DInputCurrencyBaseCustomEvent<number>) => void;
        /**
          * Placeholder for the input
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: number;
    }
    interface DInputPassword {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onEventChange"?: (event: DInputPasswordCustomEvent<string>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface DInputPin {
        /**
          * Number of characters of the pin
         */
        "characters"?: number;
        /**
          * Hint for the input
         */
        "hint"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Id for the input
         */
        "innerId": string;
        /**
          * Keyboard style
         */
        "innerInputMode"?: PinInputMode;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Hide the characters
         */
        "isSecret"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Emitted when the inputs had changed
         */
        "onEventChange"?: (event: DInputPinCustomEvent<string>) => void;
        /**
          * Placeholder of the inputs
         */
        "placeholder"?: string;
        /**
          * Type of the inputs
         */
        "type"?: PinInputType;
    }
    interface DInputSearch {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onEventChange"?: (event: DInputSearchCustomEvent<string>) => void;
        /**
          * Emitted when the button is clicked
         */
        "onEventClick"?: (event: DInputSearchCustomEvent<string>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface DInputSelect {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * The end icon for the select
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * The start icon for the select
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Callback to extract the label from the option
         */
        "labelExtractor"?: (item: any) => string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family prefix
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when blur the input
         */
        "onEventBlur"?: (event: DInputSelectCustomEvent<any>) => void;
        /**
          * Emitted when the select value has changed
         */
        "onEventChange"?: (event: DInputSelectCustomEvent<any>) => void;
        /**
          * Emitted when click on the right icon
         */
        "onEventIconEndClick"?: (event: DInputSelectCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when click on the left icon
         */
        "onEventIconStartClick"?: (event: DInputSelectCustomEvent<MouseEvent>) => void;
        /**
          * The select options
         */
        "options"?: Array<Record<string, unknown>>;
        /**
          * The value selected of the component
         */
        "selectedOption"?: Record<string, unknown>;
        /**
          * Callback to extract the value from the option
         */
        "valueExtractor"?: (item: any) => string | number;
    }
    interface DInputSwitch {
        /**
          * Id
         */
        "innerId": string;
        /**
          * Flag to change the check state
         */
        "isChecked"?: boolean;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Flag to disable the onMChange event
         */
        "isReadonly"?: boolean;
        /**
          * The text to display in the switch.
         */
        "label"?: string;
        /**
          * Id
         */
        "name"?: string;
        /**
          * Emitted when the switch has changed
         */
        "onEventChange"?: (event: DInputSwitchCustomEvent<boolean>) => void;
    }
    interface DModal {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill' | 'center';
        /**
          * Minimum size to apply the fullscreen
         */
        "fullScreenFrom"?: FullScreenFrom;
        /**
          * Is modal centered
         */
        "isCentered"?: boolean;
        /**
          * Is fullscreen in all sizes
         */
        "isFullScreen"?: boolean;
        /**
          * Is modal scrollable
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * Modal size
         */
        "modalSize"?: ModalSize;
        /**
          * the name of the modal
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onEventClose"?: (event: DModalCustomEvent<void>) => void;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface DOffcanvas {
        /**
          * Footer action direction
         */
        "footerActionPlacement"?: 'start' | 'end' | 'fill';
        /**
          * Is body scrollable while offcanvas is active
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * the name of the offcanvas
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onEventClose"?: (event: DOffcanvasCustomEvent<void>) => void;
        /**
          * Position to show offcanvas from
         */
        "openFrom"?: PositionToggleFrom;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface DProgress {
        /**
          * Current progress value
         */
        "currentValue": number;
        /**
          * Enable striped animation
         */
        "enableStripedAnimation"?: boolean;
        /**
          * Hide current value
         */
        "hideCurrentValue"?: boolean | undefined;
        /**
          * Maximum value of the bar
         */
        "maxValue"?: number;
        /**
          * Minimum value of the bar
         */
        "minValue"?: number;
    }
    interface DQuickActionButton {
        /**
          * The icon to indicate the action
         */
        "actionIcon"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "actionIconFamilyPrefix"?: string;
        /**
          * Action link text, displayed when the icon is not set
         */
        "actionLinkText"?: string;
        /**
          * Action link theme
         */
        "actionLinkTheme"?: string;
        /**
          * The title
         */
        "line1": string;
        /**
          * The subtitle
         */
        "line2": string;
        /**
          * Emitted when the input value has changed
         */
        "onEventClick"?: (event: DQuickActionButtonCustomEvent<any>) => void;
        /**
          * Emitted when the input value has changed
         */
        "onEventClickSecondary"?: (event: DQuickActionButtonCustomEvent<any>) => void;
        /**
          * Representative icon, displayed when the representativeImage is not set
         */
        "representativeIcon"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "representativeIconFamilyPrefix"?: string;
        /**
          * Representative icon circle
         */
        "representativeIconHasCircle"?: boolean | undefined;
        /**
          * Representative icon theme
         */
        "representativeIconTheme"?: string;
        /**
          * Representative image
         */
        "representativeImage"?: string;
        /**
          * Second action icon
         */
        "secondaryActionIcon"?: string;
    }
    interface DQuickActionCheck {
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Is selected
         */
        "isChecked"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * Line 3 text
         */
        "line3": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Emitted when the select value has changed
         */
        "onEventChange"?: (event: DQuickActionCheckCustomEvent<string>) => void;
        /**
          * Input value
         */
        "value": string;
    }
    interface DQuickActionSelect {
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Is selected
         */
        "isSelected"?: boolean;
        /**
          * Line 1 text
         */
        "line1": string;
        /**
          * Line 2 text
         */
        "line2": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Emitted when the select value has changed
         */
        "onEventChange"?: (event: DQuickActionSelectCustomEvent<string>) => void;
        /**
          * Input value
         */
        "value": string;
    }
    interface DQuickActionSwitch {
        /**
          * Hint to display
         */
        "hint": string;
        /**
          * The id of the input
         */
        "innerId": string;
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Is disabled
         */
        "isDisabled"?: boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the select value has changed
         */
        "onEventClick"?: (event: DQuickActionSwitchCustomEvent<boolean>) => void;
    }
    interface IntrinsicElements {
        "d-alert": DAlert;
        "d-badge": DBadge;
        "d-button": DButton;
        "d-chip": DChip;
        "d-icon": DIcon;
        "d-input": DInput;
        "d-input-check": DInputCheck;
        "d-input-counter": DInputCounter;
        "d-input-currency-base": DInputCurrencyBase;
        "d-input-password": DInputPassword;
        "d-input-pin": DInputPin;
        "d-input-search": DInputSearch;
        "d-input-select": DInputSelect;
        "d-input-switch": DInputSwitch;
        "d-modal": DModal;
        "d-offcanvas": DOffcanvas;
        "d-progress": DProgress;
        "d-quick-action-button": DQuickActionButton;
        "d-quick-action-check": DQuickActionCheck;
        "d-quick-action-select": DQuickActionSelect;
        "d-quick-action-switch": DQuickActionSwitch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "d-alert": LocalJSX.DAlert & JSXBase.HTMLAttributes<HTMLDAlertElement>;
            "d-badge": LocalJSX.DBadge & JSXBase.HTMLAttributes<HTMLDBadgeElement>;
            "d-button": LocalJSX.DButton & JSXBase.HTMLAttributes<HTMLDButtonElement>;
            "d-chip": LocalJSX.DChip & JSXBase.HTMLAttributes<HTMLDChipElement>;
            "d-icon": LocalJSX.DIcon & JSXBase.HTMLAttributes<HTMLDIconElement>;
            "d-input": LocalJSX.DInput & JSXBase.HTMLAttributes<HTMLDInputElement>;
            "d-input-check": LocalJSX.DInputCheck & JSXBase.HTMLAttributes<HTMLDInputCheckElement>;
            "d-input-counter": LocalJSX.DInputCounter & JSXBase.HTMLAttributes<HTMLDInputCounterElement>;
            "d-input-currency-base": LocalJSX.DInputCurrencyBase & JSXBase.HTMLAttributes<HTMLDInputCurrencyBaseElement>;
            "d-input-password": LocalJSX.DInputPassword & JSXBase.HTMLAttributes<HTMLDInputPasswordElement>;
            "d-input-pin": LocalJSX.DInputPin & JSXBase.HTMLAttributes<HTMLDInputPinElement>;
            "d-input-search": LocalJSX.DInputSearch & JSXBase.HTMLAttributes<HTMLDInputSearchElement>;
            "d-input-select": LocalJSX.DInputSelect & JSXBase.HTMLAttributes<HTMLDInputSelectElement>;
            "d-input-switch": LocalJSX.DInputSwitch & JSXBase.HTMLAttributes<HTMLDInputSwitchElement>;
            "d-modal": LocalJSX.DModal & JSXBase.HTMLAttributes<HTMLDModalElement>;
            "d-offcanvas": LocalJSX.DOffcanvas & JSXBase.HTMLAttributes<HTMLDOffcanvasElement>;
            "d-progress": LocalJSX.DProgress & JSXBase.HTMLAttributes<HTMLDProgressElement>;
            "d-quick-action-button": LocalJSX.DQuickActionButton & JSXBase.HTMLAttributes<HTMLDQuickActionButtonElement>;
            "d-quick-action-check": LocalJSX.DQuickActionCheck & JSXBase.HTMLAttributes<HTMLDQuickActionCheckElement>;
            "d-quick-action-select": LocalJSX.DQuickActionSelect & JSXBase.HTMLAttributes<HTMLDQuickActionSelectElement>;
            "d-quick-action-switch": LocalJSX.DQuickActionSwitch & JSXBase.HTMLAttributes<HTMLDQuickActionSwitchElement>;
        }
    }
}
