import type { Props as SelectProps, GroupBase } from 'react-select';
import DSelectOptionCheck from './components/DSelectOptionCheck';
import DSelectOptionIcon from './components/DSelectOptionIcon';
import DSelectSingleValueIconText from './components/DSelectSingleValueIconText';
import DSelectDropdownIndicator from './components/DSelectDropdownIndicator';
import DSelectClearIndicator from './components/DSelectClearIndicator';
import DSelectMultiValueRemove from './components/DSelectMultiValueRemove';
import DSelectLoadingIndicator from './components/DSelectLoadingIndicator';
import DSelectOptionEmoji from './components/DSelectOptionEmoji';
import DSelectSingleValueEmoji from './components/DSelectSingleValueEmoji';
import DSelectSingleValueEmojiText from './components/DSelectSingleValueEmojiText';
import type { BaseProps, EndIconProps, FamilyIconProps, LabelIconProps, StartIconProps, StateIcons } from '../interface';
type Props<Option, IsMulti extends boolean, Group extends GroupBase<Option>> = BaseProps & FamilyIconProps & LabelIconProps & StartIconProps & EndIconProps & StateIcons & Omit<SelectProps<Option, IsMulti, Group>, 'isDisabled' | 'isClearable' | 'isLoading' | 'isRtl' | 'isSearchable' | 'isMulti'> & {
    label?: string;
    hint?: string;
    invalid?: boolean;
    valid?: boolean;
    menuWithMaxContent?: boolean;
    onIconStartClick?: (value?: SelectProps<Option, IsMulti, Group>['defaultValue']) => void;
    onIconEndClick?: (value?: SelectProps<Option, IsMulti, Group>['defaultValue']) => void;
    disabled?: SelectProps<Option, IsMulti, Group>['isDisabled'];
    clearable?: SelectProps<Option, IsMulti, Group>['isClearable'];
    loading?: SelectProps<Option, IsMulti, Group>['isLoading'];
    rtl?: SelectProps<Option, IsMulti, Group>['isRtl'];
    searchable?: SelectProps<Option, IsMulti, Group>['isSearchable'];
    multi?: SelectProps<Option, IsMulti, Group>['isMulti'];
};
declare function DSelect<Option = unknown, IsMulti extends boolean = false, Group extends GroupBase<Option> = GroupBase<Option>>({ id, className, style, label, labelIcon, labelIconFamilyClass, labelIconFamilyPrefix, hint, iconFamilyClass, iconFamilyPrefix, iconStart, iconStartFamilyClass, iconStartFamilyPrefix, iconStartAriaLabel, iconStartTabIndex, iconEnd, iconEndFamilyClass, iconEndFamilyPrefix, iconEndAriaLabel, iconEndTabIndex, invalid, valid, invalidIcon: invalidIconProp, validIcon: validIconProp, menuWithMaxContent, disabled, clearable, loading, rtl, searchable, multi, components, defaultValue, onIconStartClick, onIconEndClick, ...props }: Props<Option, IsMulti, Group>): import("react/jsx-runtime").JSX.Element;
declare const _default: typeof DSelect & {
    OptionCheck: typeof DSelectOptionCheck;
    OptionIcon: typeof DSelectOptionIcon;
    SingleValueIconText: typeof DSelectSingleValueIconText;
    DropdownIndicator: typeof DSelectDropdownIndicator;
    ClearIndicator: typeof DSelectClearIndicator;
    MultiValueRemove: typeof DSelectMultiValueRemove;
    LoadingIndicator: typeof DSelectLoadingIndicator;
    OptionEmoji: typeof DSelectOptionEmoji;
    SingleValueEmoji: typeof DSelectSingleValueEmoji;
    SingleValueEmojiText: typeof DSelectSingleValueEmojiText;
};
export default _default;
