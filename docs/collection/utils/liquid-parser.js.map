{"version":3,"file":"liquid-parser.js","sourceRoot":"","sources":["../../../src/utils/liquid-parser.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,eAAe;EACb,OAAO,EAAE,EAAE;EACX,MAAM,EAAE,SAAgB;EACxB,IAAI,CAAC,OAAY,EAAE,MAAW;IAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAEvB,IAAI,MAAM,EAAE;MACV,6EAA6E;MAC7E,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC;QAC9B,aAAa,EAAE,IAAI;QACnB,eAAe,EAAE,IAAI;OACtB,CAAC,CAAC;KACJ;EACH,CAAC;EACD;;;;KAIG;EACH,KAAK,CAAC,gBAAgB,CAAC,YAAoB;IACzC,IAAI;MACF,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC/D;IAAC,OAAO,KAAU,EAAE;MACnB,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;EACH,CAAC;EACD;;;;KAIG;EACH,WAAW,CAAC,YAAoB;IAC9B,IAAI;MACF,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACnE;IAAC,OAAO,KAAU,EAAE;MACnB,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;EACH,CAAC;EACD,KAAK,CAAC,YAAoB;IACxB,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;KACvC;IACD,OAAO,YAAY,CAAC;EACtB,CAAC;EACD,KAAK,CAAC,UAAU,CAAC,YAAoB;IACnC,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;KAC5C;IACD,OAAO,YAAY,CAAC;EACtB,CAAC;CACF,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default {\n  library: {},\n  engine: undefined as any,\n  init(library: any, Liquid: any) {\n    this.library = library;\n\n    if (Liquid) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires,global-require\n      this.engine = new Liquid.Liquid({\n        strictFilters: true,\n        strictVariables: true,\n      });\n    }\n  },\n  /**\n   * Parse a liquid string\n   * @param liquidString Target Content Space UID\n   * @returns a usable object or string\n   */\n  async parseLiquidAsync(liquidString: string): Promise<string> {\n    try {\n      return this.engine.parseAndRender(liquidString, this.library);\n    } catch (error: any) {\n      return error.message;\n    }\n  },\n  /**\n   * Parse a liquid string\n   * @param liquidString Target Content Space UID\n   * @returns a usable object or string\n   */\n  parseLiquid(liquidString: string): string {\n    try {\n      return this.engine.parseAndRenderSync(liquidString, this.library);\n    } catch (error: any) {\n      return error.message;\n    }\n  },\n  parse(liquidString: string): string {\n    if (this.engine) {\n      return this.parseLiquid(liquidString);\n    }\n    return liquidString;\n  },\n  async parseAsync(liquidString: string): Promise<string> {\n    if (this.engine) {\n      return this.parseLiquidAsync(liquidString);\n    }\n    return liquidString;\n  },\n};\n"]}