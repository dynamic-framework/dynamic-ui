{"version":3,"file":"create-mocked-request.js","sourceRoot":"","sources":["../../../src/utils/create-mocked-request.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,YAAY,CAAC;AAElC;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,mBAAmB,CACzC,IAAO;EAEP,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAQ,CAAC;EACtC,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;EACzD,OAAO;IACL,KAAK,EAAE,GAAG,EAAE;MACV,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;MACzC,YAAY,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IACD,OAAO,EAAE,KAAK,IAAgB,EAAE;MAC9B,MAAM,QAAQ,CAAC,OAAO,CAAC;MACvB,OAAO,IAAoB,CAAC;IAC9B,CAAC;GACF,CAAC;AACJ,CAAC","sourcesContent":["import Deferred from './Deferred';\n\n/**\n * @deprecated\n * @param config\n * @param data\n */\nexport default function createMockedRequest<T, R = T>(\n  data: R,\n) {\n  const deferred = new Deferred<void>();\n  const timer = setTimeout(() => deferred.resolve(), 1000);\n  return {\n    abort: () => {\n      deferred.reject(new Error('AbortError'));\n      clearTimeout(timer);\n    },\n    perform: async (): Promise<R> => {\n      await deferred.promise;\n      return data as unknown as R;\n    },\n  };\n}\n"]}