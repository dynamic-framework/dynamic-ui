{"version":3,"file":"d-input-password.js","sourceRoot":"","sources":["../../../../src/components/d-input-password/d-input-password.tsx"],"names":[],"mappings":"AACA,OAAO,EACL,SAAS,EACT,KAAK,EACL,CAAC,EACD,IAAI,EAAE,KAAK,GACZ,MAAM,eAAe,CAAC;AAGvB,MAAM,OAAO,cAAc;;IAsFjB,kBAAa,GAAG,GAAG,EAAE;;MAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEM,sBAAiB,GAAG,GAAG,EAAE;MAC/B,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/B,CAAC,CAAC;;;iBA9Ec,EAAE;;;;uBAoBI,EAAE;iBAKR,EAAE;sBAKG,KAAK;sBAKL,KAAK;qBAKN,KAAK;;qBAUL,KAAK;mBAKP,KAAK;mBAUJ,KAAK;;EAexB,MAAM;IACJ,OAAO,CACL;MACE,4CAA4C;MAC5C,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,EAAuB,CAAC,EACvD,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAC/C,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,EACjD,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAC5C,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,EACzC,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,mBAAmB,EAAE,IAAI,CAAC,iBAAiB,GAC3C,CACH,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  Event,\n  h,\n  Prop, State,\n} from '@stencil/core';\n\n@Component({ tag: 'd-input-password' })\nexport class DInputPassword implements ComponentInterface {\n  /**\n   * The id of the input\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n    * The label text\n    */\n  @Prop() label = '';\n\n  /**\n    * Icon to display on label right\n    */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n    * The placeholder text\n    */\n  @Prop() placeholder = '';\n\n  /**\n    * The value of the input\n    */\n  @Prop() value = '';\n\n  /**\n    * Flag to disable the input\n    */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n  */\n  @Prop() isLoading = false;\n\n  /**\n    * Hint to display, also used to display validity feedback\n    */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * Emitted when the input value has changed\n   */\n  @Event() eventChange!: EventEmitter<string>;\n\n  /**\n   * State to show the icon in valid states\n   */\n  @State() visible = false;\n\n  /**\n   * HTML input element\n   */\n  private htmlInput?: HTMLDInputElement;\n\n  private changeHandler = () => {\n    this.eventChange.emit(this.htmlInput?.value.toString());\n  };\n\n  private visibilityHandler = () => {\n    this.visible = !this.visible;\n  };\n\n  render() {\n    return (\n      <d-input\n        // eslint-disable-next-line no-return-assign\n        ref={(el) => (this.htmlInput = el as HTMLDInputElement)}\n        innerId={this.innerId}\n        name={this.name}\n        label={this.label}\n        labelIcon={this.labelIcon}\n        labelIconFamilyClass={this.labelIconFamilyClass}\n        labelIconFamilyPrefix={this.labelIconFamilyPrefix}\n        placeholder={this.placeholder}\n        value={this.value}\n        iconEnd={!this.visible ? 'eye-slash' : 'eye'}\n        type={!this.visible ? 'password' : 'text'}\n        isDisabled={this.isDisabled}\n        isReadOnly={this.isReadOnly}\n        isLoading={this.isLoading}\n        hint={this.hint}\n        isInvalid={this.isInvalid}\n        isValid={this.isValid}\n        onEventChange={this.changeHandler}\n        onEventIconEndClick={this.visibilityHandler}\n      />\n    );\n  }\n}\n"]}