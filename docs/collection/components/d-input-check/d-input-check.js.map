{"version":3,"file":"d-input-check.js","sourceRoot":"","sources":["../../../../src/components/d-input-check/d-input-check.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,CAAC,EACD,IAAI,EAEJ,KAAK,GAEN,MAAM,eAAe,CAAC;AAKvB,MAAM,OAAO,WAAW;;IA8Cd,kBAAa,GAAG,CAAC,KAAY,EAAE,EAAE;MACvC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAI,KAAK,CAAC,MAA2B,CAAC;MAC9D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACpB,SAAS,EAAE,OAAO;QAClB,KAAK;OACN,CAAC,CAAC;IACL,CAAC,CAAC;;;;qBAjCkB,KAAK;;sBAUJ,KAAK;;;;EAyB1B,MAAM;IACJ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MACf,OAAO,CACL,aACE,QAAQ,EAAE,IAAI,CAAC,aAAa,EAC5B,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,SAAS,EACvB,QAAQ,EAAE,IAAI,CAAC,UAAU,EACzB,aAAa,EAAE,IAAI,CAAC,eAAe,GACnC,CACH,CAAC;KACH;IAED,OAAO,CACL,WAAK,KAAK,EAAC,YAAY;MACrB,aACE,QAAQ,EAAE,IAAI,CAAC,aAAa,EAC5B,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,SAAS,EACvB,QAAQ,EAAE,IAAI,CAAC,UAAU,EACzB,aAAa,EAAE,IAAI,CAAC,eAAe,GACnC;MACF,aACE,KAAK,EAAC,kBAAkB,EACxB,OAAO,EAAE,IAAI,CAAC,OAAO,IAEpB,IAAI,CAAC,KAAK,CACL,CACJ,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  h,\n  Prop,\n  ComponentInterface,\n  Event,\n  EventEmitter,\n} from '@stencil/core';\n\nimport type { FormCheckType } from './d-input-check-interface';\n\n@Component({ tag: 'd-input-check' })\nexport class DInputCheck implements ComponentInterface {\n  /**\n   * Set whether is a checkbox input or a radio input\n   */\n  @Prop() type!: FormCheckType;\n\n  /**\n   * HTML Name to use within a form or JS reference\n   */\n  @Prop() name?: string;\n\n  /**\n   * Text that will be displayed beside Check input or Radio input\n   */\n  @Prop() label?: string;\n\n  /**\n   * Set checkbox or radio button marked as selected or not\n   */\n  @Prop() isChecked = false;\n\n  /**\n   * Form control identifier\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * Set input as disabled\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Set view of checkbox as indeterminated\n   */\n  @Prop() isIndeterminate?: boolean;\n\n  /**\n   * A string representing the value of the checkbox or radio\n   */\n  @Prop() value?: string;\n\n  /**\n   * Emitted when the switch has changed\n   */\n  @Event() eventChange!: EventEmitter;\n\n  private changeHandler = (event: Event) => {\n    const { checked, value } = (event.target as HTMLInputElement);\n    this.eventChange.emit({\n      isChecked: checked,\n      value,\n    });\n  };\n\n  render() {\n    if (!this.label) {\n      return (\n        <input\n          onChange={this.changeHandler}\n          class=\"form-check-input\"\n          type={this.type}\n          name={this.name}\n          id={this.innerId}\n          value={this.value}\n          checked={this.isChecked}\n          disabled={this.isDisabled}\n          indeterminate={this.isIndeterminate}\n        />\n      );\n    }\n\n    return (\n      <div class=\"form-check\">\n        <input\n          onChange={this.changeHandler}\n          class=\"form-check-input\"\n          type={this.type}\n          name={this.name}\n          id={this.innerId}\n          value={this.value}\n          checked={this.isChecked}\n          disabled={this.isDisabled}\n          indeterminate={this.isIndeterminate}\n        />\n        <label\n          class=\"form-check-label\"\n          htmlFor={this.innerId}\n        >\n          {this.label}\n        </label>\n      </div>\n    );\n  }\n}\n"]}