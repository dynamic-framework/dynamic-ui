{"file":"d-input-switch.entry.cjs.js","mappings":";;;;;;MAaa,YAAY;;;;IAqDf,kBAAa,GAAG,CAAC,KAAY;MACnC,MAAM,KAAK,GAAI,KAAK,CAAC,MAA2B,CAAC,OAAO,CAAC;MACzD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;MAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B,CAAC;;;;;;;;;EAhBF,qBAAqB,CAAC,QAAiB;IACrC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;GACnC;EAED,iBAAiB;IACf,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;IAExC,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,MAAM,KAAK,CAAC;KAC/B;GACF;EAQD,MAAM;IACJ,QACEA,iBAAK,KAAK,EAAC,wBAAwB,IACjCA,mBACE,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,aAAa,EAC5B,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,IAAI,CAAC,iBAAiB,EAC/B,QAAQ,EAAE,IAAI,CAAC,UAAU,GACzB,EACD,CAAC,CAAC,IAAI,CAAC,KAAK,KACXA,mBACE,KAAK,EAAC,kBAAkB,EACxB,OAAO,EAAE,IAAI,CAAC,OAAO,IAEpB,IAAI,CAAC,KAAK,CACL,CACT,CACG,EACN;GACH;;;;;;;;;","names":["h"],"sources":["./src/components/d-input-switch/d-input-switch.tsx"],"sourcesContent":["import {\n  Component,\n  h,\n  ComponentInterface,\n  Prop,\n  Event,\n  EventEmitter,\n  State,\n  Watch,\n  Element,\n} from '@stencil/core';\n\n@Component({ tag: 'd-input-switch' })\nexport class DInputSwitch implements ComponentInterface {\n  @Element() el!: HTMLDInputSwitchElement;\n\n  /**\n   * The text to display in the switch.\n   */\n  @Prop() label?: string;\n\n  /**\n   * Id\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * Id\n   */\n  @Prop() name?: string;\n\n  /**\n   * Flag to change the check state\n   */\n  @Prop() isChecked?: boolean;\n\n  /**\n   * Flag to disable the input\n   */\n  @Prop() isDisabled?: boolean;\n\n  /**\n   * Flag to disable the onMChange event\n   */\n  @Prop() isReadonly?: boolean;\n\n  /**\n   * Emitted when the switch has changed\n   */\n  @Event() eventChange!: EventEmitter<boolean>;\n\n  @State() internalIsChecked?: boolean;\n\n  @Watch('isChecked')\n  watchIsCheckedHandler(newValue: boolean) {\n    this.internalIsChecked = newValue;\n  }\n\n  connectedCallback() {\n    this.internalIsChecked = this.isChecked;\n\n    if (this.isReadonly) {\n      this.el.onclick = () => false;\n    }\n  }\n\n  private changeHandler = (event: Event) => {\n    const value = (event.target as HTMLInputElement).checked;\n    this.internalIsChecked = value;\n    this.eventChange.emit(value);\n  };\n\n  render() {\n    return (\n      <div class=\"form-check form-switch\">\n        <input\n          id={this.innerId}\n          name={this.name}\n          onChange={this.changeHandler}\n          class=\"form-check-input\"\n          type=\"checkbox\"\n          role=\"switch\"\n          checked={this.internalIsChecked}\n          disabled={this.isDisabled}\n        />\n        {!!this.label && (\n          <label\n            class=\"form-check-label\"\n            htmlFor={this.innerId}\n          >\n            {this.label}\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n"],"version":3}