{"file":"m-input-search.entry.cjs.js","mappings":";;;;;;MASa,YAAY;;;;;IAsFf,kBAAa,GAAG,CAAC,KAAmC;MAC1D,KAAK,CAAC,eAAe,EAAE,CAAC;MACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC5C,CAAC;IAEM,iBAAY,GAAG,CAAC,KAAkB;;MACxC,KAAK,CAAC,eAAe,EAAE,CAAC;MACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAA,IAAI,CAAC,iBAAiB,0CAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC5D,CAAC;;;iBAhFc,EAAE;;;;uBAoBI,EAAE;iBAKR,EAAE;sBAKG,KAAK;sBAKL,KAAK;qBAKN,KAAK;;qBAUL,KAAK;mBAKP,KAAK;;EA2BvB,MAAM;IACJ,QACEA;;MAEE,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC,EAC1C,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAC/C,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,EACjD,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAC,QAAQ,EAChB,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,SAAS,EAAE,IAAI,CAAC,aAAa,EAC7B,eAAe,EAAE,IAAI,CAAC,YAAY;MAClC,EACF;GACH;;;;;","names":["h"],"sources":["./src/components/m-input-search/m-input-search.tsx"],"sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  Event,\n  h,\n  Prop,\n} from '@stencil/core';\n\n@Component({ tag: 'm-input-search' })\nexport class MInputSearch implements ComponentInterface {\n  /**\n   * The id of the input\n   */\n  @Prop() mId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n    * The label text\n    */\n  @Prop() label = '';\n\n  /**\n    * Icon to display on label right\n    */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n    * The placeholder text\n    */\n  @Prop() placeholder = '';\n\n  /**\n    * The value of the input\n    */\n  @Prop() value = '';\n\n  /**\n    * Flag to disable the input\n    */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n  */\n  @Prop() isLoading = false;\n\n  /**\n    * Hint to display, also used to display validity feedback\n    */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * Emitted when the input value has changed\n   */\n  @Event({ eventName: 'mChange' }) mChange!: EventEmitter<string>;\n\n  /**\n   * Emitted when the button is clicked\n   */\n  @Event({ eventName: 'mClick' }) mClick!: EventEmitter<string>;\n\n  /**\n   * HTML m-input element\n   */\n  private htmlMInputElement?: HTMLMInputElement;\n\n  private changeHandler = (event: CustomEvent<string | number>) => {\n    event.stopPropagation();\n    this.mChange.emit(event.detail.toString());\n  };\n\n  private clickHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.mClick.emit(this.htmlMInputElement?.value.toString());\n  };\n\n  render() {\n    return (\n      <m-input\n        // eslint-disable-next-line no-return-assign\n        ref={(el) => (this.htmlMInputElement = el)}\n        mId={this.mId}\n        name={this.name}\n        label={this.label}\n        labelIcon={this.labelIcon}\n        labelIconFamilyClass={this.labelIconFamilyClass}\n        labelIconFamilyPrefix={this.labelIconFamilyPrefix}\n        placeholder={this.placeholder}\n        value={this.value}\n        iconEnd=\"search\"\n        isDisabled={this.isDisabled}\n        isReadOnly={this.isReadOnly}\n        isLoading={this.isLoading}\n        hint={this.hint}\n        isInvalid={this.isInvalid}\n        isValid={this.isValid}\n        onMChange={this.changeHandler}\n        onMIconEndClick={this.clickHandler}\n      />\n    );\n  }\n}\n"],"version":3}